# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: user-setup
#   namespace: elastic-search
# data:
#   user-setup.sh: |
#     #!/bin/sh

#     # Read the new user's username and password from Azure KeyVault
#     NEW_USERNAME=$(cat /mnt/azure-keyvault/opendes-elastic-username)
#     NEW_PASSWORD=$(cat /mnt/azure-keyvault/opendes-elastic-password)
    
#     # Define the custom role and user creation JSON payloads
#     CUSTOM_ELASTIC_ROLE="service-role"
#     ROLE_JSON="{\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"*\"],\"privileges\":[\"read\",\"write\",\"create\",\"delete\",\"index\",\"monitor\",\"create_index\",\"delete_index\",\"view_index_metadata\",\"manage\"]}]}"
#     USER_JSON="{\"password\":\"$NEW_PASSWORD\",\"roles\":[\"$CUSTOM_ELASTIC_ROLE\"]}"

#     # Check if the custom role already exists
#     role_response=$(curl -s -k -o /dev/null -w "%{http_code}" -u "elastic:$(cat /mnt/elasticsearch-es-elastic-user/elastic)" \
#       "https://elasticsearch-es-http.elastic-search.svc.cluster.local:9200/_security/role/$CUSTOM_ELASTIC_ROLE")

#     if [ "$role_response" -eq 200 ]; then
#       echo "Role $CUSTOM_ELASTIC_ROLE already exists."
#     else
#       # Create the custom role
#       create_role_response=$(curl -s -k -o /dev/null -w "%{http_code}" -X POST "https://elasticsearch-es-http.elastic-search.svc.cluster.local:9200/_security/role/$CUSTOM_ELASTIC_ROLE" \
#         -u "elastic:$(cat /mnt/elasticsearch-es-elastic-user/elastic)" \
#         -H "Content-Type: application/json" \
#         -d "$ROLE_JSON")

#       if [ "$create_role_response" -eq 200 ]; then
#         echo "Successfully created the custom role $CUSTOM_ELASTIC_ROLE."
#       else
#         echo "Failed to create the custom role. HTTP status code: $create_role_response"
#         exit 1
#       fi
#     fi

#     # Check if the new user already exists
#     user_response=$(curl -s -k -o /dev/null -w "%{http_code}" -u "elastic:$(cat /mnt/elasticsearch-es-elastic-user/elastic)" \
#       "https://elasticsearch-es-http.elastic-search.svc.cluster.local:9200/_security/user/$NEW_USERNAME")

#     if [ "$user_response" -eq 200 ]; then
#       echo "User $NEW_USERNAME already exists. Updating password."
#       # Update the existing user's password
#       update_password_response=$(curl -s -k -o /dev/null -w "%{http_code}" -X POST "https://elasticsearch-es-http.elastic-search.svc.cluster.local:9200/_security/user/$NEW_USERNAME/_password" \
#         -u "elastic:$(cat /mnt/elasticsearch-es-elastic-user/elastic)" \
#         -H "Content-Type: application/json" \
#         -d "{\"password\":\"$NEW_PASSWORD\"}")

#       if [ "$update_password_response" -eq 200 ]; then
#         echo "Successfully updated the password for user $NEW_USERNAME."

#         # Test the new user credentials
#         test_response=$(curl -s -k -o /dev/null -w "%{http_code}" -u "$NEW_USERNAME:$NEW_PASSWORD" -k "https://elasticsearch-es-http.elastic-search.svc.cluster.local:9200")
        
#         if [ "$test_response" -eq 200 ]; then
#           echo "Successfully authenticated with updated user credentials."
#         else
#           echo "Failed to authenticate with updated user credentials. HTTP status code: $test_response"
#           exit 1
#         fi
#       else
#         echo "Failed to update the password for user. HTTP status code: $update_password_response"
#         exit 1
#       fi
#     else
#       # Create the new user with the custom role
#       create_user_response=$(curl -s -k -o /dev/null -w "%{http_code}" -X POST "https://elasticsearch-es-http.elastic-search.svc.cluster.local:9200/_security/user/$NEW_USERNAME" \
#         -u "elastic:$(cat /mnt/elasticsearch-es-elastic-user/elastic)" \
#         -H "Content-Type: application/json" \
#         -d "$USER_JSON")

#       if [ "$create_user_response" -eq 200 ]; then
#         echo "Successfully created the new user $NEW_USERNAME."

#         # Test the new user credentials
#         test_response=$(curl -s -k -o /dev/null -w "%{http_code}" -u "$NEW_USERNAME:$NEW_PASSWORD" -k "https://elasticsearch-es-http.elastic-search.svc.cluster.local:9200")
        
#         if [ "$test_response" -eq 200 ]; then
#           echo "Successfully authenticated with new user credentials."
#         else
#           echo "Failed to authenticate with new user credentials. HTTP status code: $test_response"
#           exit 1
#         fi
#       else
#         echo "Failed to create the new user. HTTP status code: $create_user_response"
#         exit 1
#       fi
#     fi
# ---
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: init-elastic
#   namespace: elastic-search
# spec:
#   activeDeadlineSeconds: 600 # Timeout set to 10 minutes
#   backoffLimit: 2            # Job will fail after 2 unsuccessful retries
#   template:
#     spec:
#       serviceAccountName: workload-identity-sa  # Specify the service account here
#       initContainers:
#       - name: health-check
#         image: mcr.microsoft.com/cbl-mariner/base/core:2.0
#         command: ["/bin/sh"]
#         args:
#         - -c
#         - |
#           tdnf install -y curl jq && \
#           while true; do
#             health_status=$(curl -u "elastic:$(cat /mnt/elasticsearch-es-elastic-user/elastic)" -k -s https://elasticsearch-es-http.elastic-search.svc.cluster.local:9200/_cluster/health | jq -r '.status')
#             if [ "$health_status" = "green" ]; then
#               echo "Cluster health is green."
#               exit 0
#             fi
#             echo "Cluster health is $health_status. Waiting for it to be green..."
#             sleep 30
#           done
#         volumeMounts:
#         - name: es-basic-auth
#           mountPath: /mnt/elasticsearch-es-elastic-user
#       containers:
#       - name: elastic-user
#         image: mcr.microsoft.com/cbl-mariner/base/core:2.0
#         command: ["/bin/sh"]
#         args:
#         - -c
#         - |
#           sh /mnt/scripts/user-setup.sh
#         volumeMounts:
#         - name: script-config
#           mountPath: /mnt/scripts
#         - name: azure-keyvault
#           mountPath: /mnt/azure-keyvault
#         - name: es-basic-auth
#           mountPath: /mnt/elasticsearch-es-elastic-user
#       restartPolicy: Never
#       volumes:
#       - name: es-basic-auth
#         secret:
#           secretName: elasticsearch-es-elastic-user
#       - name: azure-keyvault
#         csi:
#           driver: secrets-store.csi.k8s.io
#           readOnly: true
#           volumeAttributes:
#             secretProviderClass: azure-keyvault
#       - name: script-config
#         configMap:
#           name: user-setup





# # ---
# # apiVersion: batch/v1
# # kind: Job
# # metadata:
# #   name: cred-init
# #   namespace: elastic-search
# # spec:
# #   activeDeadlineSeconds: 1200
# #   backoffLimit: 50
# #   ttlSecondsAfterFinished: 3600
# #   template:
# #     metadata:
# #       name: cred-create
# #     spec:
# #       serviceAccountName: workload-identity-sa  # Specify the service account here
# #       initContainers:
# #       - name: health-check
# #         image: docker.elastic.co/elasticsearch/elasticsearch:8.5.3
# #         volumeMounts:
# #           - name: es-basic-auth
# #             mountPath: /mnt/elasticsearch-es-elastic-user
# #             subPath: elastic
# #         args:
# #         - /bin/sh
# #         - -c
# #         - |
# #           check_cluster_health() {
# #               echo ""
# #               echo "--------- Trying to fetch cluster health ----------"
# #               PASSWORD=$(cat /mnt/elasticsearch-es-elastic-user)
# #               echo "Password read from secret: $PASSWORD"  # Debugging step
# #               response=$(curl -v -u "elastic:$PASSWORD" -w " \\nHTTP ResponseCode: %{response_code}" "https://elasticsearch-es-http.elastic-search.svc.cluster.local:9200/_cluster/health"  2>&1)
# #               response=$(echo "$response" | sed "s/Authorization: Basic \S*/Authorization: <masked>/; s/Server auth using Basic with user \S*/Server auth using Basic with user <masked>/; s/{/'{/; s/}/}'/")
# #               echo ""
# #               echo "Cluster health response: $response"
# #               status=$(echo "$response" | grep -oP '(?<="status":")[^"]+')
# #               echo "Cluster status: $status"
# #           }

# #           retry_count=0
# #           max_retries=150
# #           retry_interval=5

# #           while [[ $retry_count -lt $max_retries ]];
# #           do
# #             check_cluster_health
# #             if [[ "${status,,}" == "green" ]]; then
# #                 echo "Cluster health is green."
# #                 break
# #             fi
# #             echo "Cluster health is not green. Attempt $((retry_count+1))/$max_retries"
# #             sleep $retry_interval
# #             ((retry_count++))
# #           done

# #           if [[ $retry_count -ge $max_retries ]]; then
# #             echo "Max Retries done! ElasticSearch did not reach green state in expected time. Exiting with code -1"
# #             exit -1
# #           fi
# #           echo "Completed ElasticSearch Health Check Successfully. Exiting.."

# #       containers:
# #       - name: role-and-user-creator
# #         image: docker.elastic.co/elasticsearch/elasticsearch:8.5.3
# #         volumeMounts:
# #           - name: azure-keyvault
# #             mountPath: /mnt/azure-keyvault
# #           - name: es-basic-auth
# #             mountPath: /mnt/elasticsearch-es-elastic-user
# #             subPath: elastic
# #         securityContext:
# #           allowPrivilegeEscalation: false
# #           runAsUser: 0
# #         command: 
# #               - sh
# #               - "-c"
# #               - |
# #                 /bin/bash <<'EOF'
# #                 sleep 10
# #                 set -e
# #                 DP_NAME="opendes"
# #                 CUSTOM_ELASTIC_ROLE="service-role"
# #                 ROLE_JSON="{\"metadata\":{\"type\":\"role\",\"name\":\"${CUSTOM_ELASTIC_ROLE}\"},\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"*\"],\"privileges\":[\"read\",\"write\",\"create\",\"delete\",\"index\",\"monitor\",\"create_index\",\"delete_index\",\"view_index_metadata\",\"manage\"]}]}"
# #                 PRIMARY_USER_JSON="{\"password\":\"$(</mnt/azure-keyvault/opendes-es-primary-user-password)\" ,\"roles\":[\"${CUSTOM_ELASTIC_ROLE}\"]}"
# #                 SECONDARY_USER_JSON="{\"password\": \"$(</mnt/azure-keyvault/opendes-es-secondary-user-password)\",\"roles\":[\"${CUSTOM_ELASTIC_ROLE}\"]}"

# #                 response=($(curl -s -w "\n%{http_code}" -o response.txt -u "elastic:$(cat /mnt/elasticsearch-es-elastic-user)" -XPOST "http://elasticsearch-es-http.elastic-search:9200/_security/role/${CUSTOM_ELASTIC_ROLE}" -k -H "Content-Type: application/json" -d"${ROLE_JSON}"))
# #                 echo "Create Custom Role - ResponseCode: $response, ResponseBody: $(cat response.txt)"
# #                 if [ "$response" -ne 200 ]; then echo "The request failed with status code: $response"; exit 1; fi

# #                 response=($(curl -s -w "\n%{http_code}" -o response.txt -u "elastic:$(cat /mnt/elasticsearch-es-elastic-user)" -XPOST "http://elasticsearch-es-http.elastic-search:9200/_security/user/${primaryUserName}" -k -H "Content-Type: application/json" -d"${PRIMARY_USER_JSON}"))
# #                 echo "Create Primary User - ResponseCode: $response, ResponseBody: $(cat response.txt)"
# #                 if [ "$response" -ne 200 ]; then echo "The request failed with status code: $response"; exit 1; fi

# #                 response=($(curl -s -w "\n%{http_code}" -o response.txt -u "elastic:$(cat /mnt/elasticsearch-es-elastic-user)" -XPOST "http://elasticsearch-es-http.elastic-search:9200/_security/user/${secondaryUserName}" -k -H "Content-Type: application/json" -d"${SECONDARY_USER_JSON}"))
# #                 echo "Create Secondary User - ResponseCode: $response, ResponseBody: $(cat response.txt)"
# #                 if [ "$response" -ne 200 ]; then echo "The request failed with status code: $response"; exit 1; fi

# #                 echo -e "######### Role and User setup complete!! ###########\n"
# #                 EOF
# #       restartPolicy: OnFailure
# #       volumes:
# #         - name: es-basic-auth
# #           secret:
# #             secretName: "elasticsearch-es-elastic-user"
# #         - name: azure-keyvault
# #           csi:
# #             driver: secrets-store.csi.k8s.io
# #             readOnly: true
# #             volumeAttributes:
# #               secretProviderClass: azure-keyvault
