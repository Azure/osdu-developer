{{- $tenant := .Values.azure.tenantId -}}
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: header-1-remove-user-appid-from-default
spec:
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: envoy.filters.network.http_connection_manager
            subFilter: 
              name: envoy.filters.http.router
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.lua.remove-user-appid-header
        typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
            function envoy_on_request(request_handle)
              request_handle:headers():remove("x-user-id")
              request_handle:headers():remove("x-app-id")
              -- Log that headers were removed
              request_handle:logInfo("x-user-id and x-app-id headers removed")
            end
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: header-2-add-user-from-msft-aad-token
spec:
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: envoy.filters.network.http_connection_manager
            subFilter: 
              name: envoy.lua.remove-user-appid-header
    patch:
      operation: INSERT_AFTER
      value:
        name: envoy.lua.user-from-msft-aad-token
        typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
            msft_issuer = "https://sts.windows.net/{{ $tenant }}/"

            function envoy_on_request(request_handle)
              local jwt_authn = request_handle:streamInfo():dynamicMetadata():get("envoy.filters.http.jwt_authn")
              if jwt_authn then
                if jwt_authn[msft_issuer] then
                  request_handle:headers():add("x-app-id", jwt_authn[msft_issuer]["aud"])
                  request_handle:logInfo("Well Known Header: x-app-id added")
                  if jwt_authn[msft_issuer]["upn"] then
                    request_handle:headers():add("x-user-id", jwt_authn[msft_issuer]["upn"])
                    request_handle:logInfo("Well Known Header: x-user-id added -> Claim: upn")
                  elseif jwt_authn[msft_issuer]["unique_name"] then
                    request_handle:headers():add("x-user-id", jwt_authn[msft_issuer]["unique_name"])
                    request_handle:logInfo("Well Known Header: x-user-id added -> Claim: unique_name")
                  elseif jwt_authn[msft_issuer]["appid"] then
                    request_handle:headers():add("x-user-id", jwt_authn[msft_issuer]["appid"])
                    request_handle:logInfo("Well Known Header: x-user-id added -> Claim: appid")
                  end
                end
              else
                request_handle:logInfo("JWT Payload: Not found")
              end
            end
# ---
# apiVersion: networking.istio.io/v1alpha3
# kind: EnvoyFilter
# metadata:
#   name: header-3-add-user-from-msftonline-token
# spec:
#   configPatches:
#   - applyTo: HTTP_FILTER
#     match:
#       context: SIDECAR_INBOUND
#       listener:
#         filterChain:
#           filter:
#             name: envoy.filters.network.http_connection_manager
#             subFilter: 
#               name: envoy.lua.remove-user-appid-header
#     patch:
#       operation: INSERT_AFTER
#       value:
#         name: envoy.lua.user-from-msftonline-token
#         typed_config:
#           "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
#           inlineCode: |
#             msft_issuer = "https://login.microsoftonline.com/{{ $tenant }}/v2.0"
#             function envoy_on_request(request_handle)
#               local jwt_authn = request_handle:streamInfo():dynamicMetadata():get("envoy.filters.http.jwt_authn")
#               if jwt_authn then
#                 if jwt_authn[msft_issuer] then
#                   request_handle:headers():add("x-app-id", jwt_authn[msft_issuer]["aud"])
#                   request_handle:logInfo("Well Known Header: x-app-id added")
#                   if jwt_authn[msft_issuer]["oid"] then
#                     request_handle:headers():add("x-user-id", jwt_authn[msft_issuer]["oid"])
#                     request_handle:logInfo("Well Known Header: x-user-id added -> Claim: oid")
#                   elseif jwt_authn[msft_issuer]["azp"] then
#                     request_handle:headers():add("x-user-id", jwt_authn[msft_issuer]["azp"])
#                     request_handle:logInfo("Well Known Header: x-user-id added -> Claim: azp")
#                   end
#                 end
#               end
#             else
#               request_handle:logInfo("JWT Payload: Not found")
#             end
