apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "dns-configuration.fullname" . }}-script
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "dns-configuration.labels" . | nindent 4 }}
data:
  configure-dns.sh: |
    #!/usr/bin/env bash
    set -euo pipefail

    echo "================================================================="
    echo "  Starting DNS + Cert Configuration for AKS LoadBalancer"
    echo "================================================================="

    install_kubectl() {
      echo "Installing kubectl…"
      curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      chmod +x kubectl && mv kubectl /usr/local/bin/
    }

    login_azure() {
      echo "Logging into Azure…"
      az login --federated-token "$(cat \"${AZURE_FEDERATED_TOKEN_FILE}\")" \
        --service-principal \
        -u \"${AZURE_CLIENT_ID}\" \
        -t \"${AZURE_TENANT_ID}\" \
        --allow-no-subscriptions
      az account set --subscription "${AZURE_SUBSCRIPTION}"
    }

    wait_for_loadbalancer() {
      echo "Waiting for LoadBalancer IP…"
      for ((i=0; i<MAX_RETRIES; i++)); do
        EXTERNAL_IP=$(kubectl get svc "${ISTIO_SERVICE_NAME}" -n "${ISTIO_NAMESPACE}" \
          -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || :)
        [[ -n "$EXTERNAL_IP" ]] && { echo "IP: $EXTERNAL_IP"; return 0; }
        echo "…retry $((i+1))/${MAX_RETRIES}"
        sleep "${RETRY_INTERVAL}"
      done
      echo "ERROR: no IP" && return 1
    }

    configure_dns() {
      echo "Configuring DNS…"
      NODE_RG=$(az aks show \
        --resource-group "${RESOURCE_GROUP}" \
        --name "${AKS_NAME}" \
        --query nodeResourceGroup -o tsv)
      IP_NAME=$(az network public-ip list \
        --resource-group "${NODE_RG}" \
        --query "[?ipAddress=='${EXTERNAL_IP}'].name" -o tsv)
      az network public-ip update \
        --resource-group "${NODE_RG}" \
        --name "${IP_NAME}" \
        --dns-name "${DNS_NAME}"
      FQDN=$(az network public-ip show \
        --resource-group "${NODE_RG}" \
        --name "${IP_NAME}" \
        --query dnsSettings.fqdn -o tsv)
      echo "FQDN: $FQDN"
    }

    apply_certificate() {
      echo "Applying cert-manager Certificate for $FQDN"
      sed "s/__FQDN__/$FQDN/g" /scripts/istio-certificate.yaml | kubectl apply -f -
    }

    main() {
      install_kubectl
      login_azure
      wait_for_loadbalancer
      configure_dns
      apply_certificate
      echo "✔ Certificate applied for ${FQDN}"
    }

    main "$@"
  istio-certificate.yaml: |
    apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      name: istio-ingressgateway-certs
      namespace: istio-system
    spec:
      secretName: istio-ingressgateway-certs
      duration: 2160h # 90 days
      renewBefore: 360h # 15 days
      subject:
        organizations:
          - Example Organization
      commonName: __FQDN__
      dnsNames:
        - __FQDN__
      issuerRef:
        name: letsencrypt-staging
        kind: ClusterIssuer
