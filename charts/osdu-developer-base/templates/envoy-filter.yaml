# This command increases logging -->  istioctl proxy-config log <pod_name> --level lua:debug
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: microsoft-identity-filter
spec:
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: envoy.filters.network.http_connection_manager
            subFilter: 
              name: envoy.filters.http.router
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.lua.remove-user-appid-header
        typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
            function envoy_on_request(request_handle)
                -- Remove the Well Known Headers
                request_handle:headers():remove("x-user-id")
                request_handle:headers():remove("x-app-id")
                request_handle:logInfo("x-user-id and x-app-id headers removed")

                -- Retrieve the JWT Payload
                local meta = request_handle:streamInfo():dynamicMetadata():get("envoy.filters.http.jwt_authn")

                if meta and meta["payload"] then
                    local payload = meta["payload"]
                    request_handle:logDebug("JWT Payload: " .. tableToString(payload))

                    -- Set the x-app-id Well Known Header if 'aud' claim is present
                    if payload["aud"] then
                        request_handle:headers():add("x-app-id", payload["aud"])
                        request_handle:logWarn("x-app-id set from 'aud' claim: " .. payload["aud"])
                    else
                        request_handle:logError("JWT Payload does not contain 'aud' claim; cannot set x-app-id")
                    end

                    -- Check issuer 
                    if string.find(payload["iss"], "sts.windows.net") then
                        -- Set Well Known Header with an order of preference: upn, unique_name, appid
                        if payload["upn"] then
                            request_handle:headers():add("x-user-id", payload["upn"])
                            request_handle:logWarn("x-user-id set from 'upn' claim: " .. payload["upn"])
                        elseif payload["unique_name"] then
                            request_handle:headers():add("x-user-id", payload["unique_name"])
                            request_handle:logWarn("x-user-id set from 'unique_name' claim: " .. payload["unique_name"])
                        elseif payload["appid"] then
                            request_handle:headers():add("x-user-id", payload["appid"])
                            request_handle:logWarn("x-user-id set from 'appid' claim: " .. payload["appid"])
                        else
                            request_handle:logError("No valid user ID claim (upn, unique_name, appid) found for sts.windows.net")
                        end

                    elseif string.find(payload["iss"], "login.microsoftonline.com") then
                        -- Set Well Known Header with an order of preference: azp, oid
                        if payload["azp"] then
                            request_handle:headers():add("x-user-id", payload["azp"])
                            request_handle:logWarn("x-user-id set from 'azp' claim: " .. payload["azp"])
                        elseif payload["oid"] then
                            request_handle:headers():add("x-user-id", payload["oid"])
                            request_handle:logWarn("x-user-id set from 'oid' claim: " .. payload["oid"])
                        else
                            request_handle:logError("No valid user ID claim (azp, oid) found for login.microsoftonline.com")
                        end
                    else
                        request_handle:logError("Issuer does not match known issuers")
                    end
                else
                    request_handle:logError("No JWT metadata found or payload is malformed")
                end
            end

            -- Helper function to convert a table to a string for logging
            function tableToString(tbl, indent)
                if not indent then indent = 0 end
                if type(tbl) ~= 'table' then return tostring(tbl) end
                local lines = {}
                for k, v in pairs(tbl) do
                    local formatting = string.rep("  ", indent) .. k .. ": "
                    if type(v) == "table" then
                        table.insert(lines, formatting)
                        table.insert(lines, tableToString(v, indent+1))
                    else
                        table.insert(lines, formatting .. tostring(v))
                    end
                end
                return table.concat(lines, "\n")
            end