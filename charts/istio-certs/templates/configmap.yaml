apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "dns-configuration.fullname" . }}-script
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "dns-configuration.labels" . | nindent 4 }}
data:
  configure-dns.sh: |
    #!/usr/bin/env bash
    set -euo pipefail

    echo "================================================================="
    echo "  Starting DNS + Cert Configuration for AKS LoadBalancer"
    echo "================================================================="

    install_kubectl() {
      echo "Installing kubectl…"
      tdnf install -y ca-certificates
      curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      chmod +x kubectl && mv kubectl /usr/local/bin/
    }

    wait_for_loadbalancer_ip() {
      echo "Waiting for LoadBalancer IP on service istio-ingress-external in istio-system..."
      for ((i=0; i<60; i++)); do
        EXTERNAL_IP=$(kubectl get svc istio-ingress-external -n istio-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || :)
        if [[ -n "$EXTERNAL_IP" ]]; then
          echo "Found IP: $EXTERNAL_IP"
          return 0
        fi
        echo "…retry $((i+1))/60"
        sleep 5
      done
      echo "ERROR: LoadBalancer IP not assigned after 60 attempts."
      return 1
    }

    annotate_service_with_dns() {
      echo "Annotating service with DNS label ${DNS_NAME}..."
      kubectl annotate svc istio-ingress-external -n istio-system \
        service.beta.kubernetes.io/azure-dns-label-name="${DNS_NAME}" --overwrite
    }

    apply_certificate() {
      FQDN="${DNS_NAME}.${AZURE_REGION}.cloudapp.azure.com"
      echo "Using FQDN: $FQDN"
      echo "Applying cert-manager Certificate for $FQDN"
      sed "s/__FQDN__/$FQDN/g" /scripts/istio-certificate.yaml | kubectl apply -f -
      echo "✔ Certificate applied for ${FQDN}"
    }

    main() {
      install_kubectl
      wait_for_loadbalancer_ip
      annotate_service_with_dns
      apply_certificate
    }

    main "$@"
  istio-certificate.yaml: |
    apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      name: istio-ingressgateway-certs
      namespace: istio-system
    spec:
      secretName: istio-ingressgateway-certs
      duration: 2160h # 90 days
      renewBefore: 360h # 15 days
      subject:
        organizations:
          - OSDU Developer
      commonName: __FQDN__
      dnsNames:
        - __FQDN__
      issuerRef:
        name: letsencrypt-staging
        kind: ClusterIssuer
      # Use HTTP-01 challenge which will work with Gateway API HTTPRoute
      # The ACME challenge solver will create temporary pods that need routing
      privateKey:
        algorithm: RSA
        size: 2048
      usages:
      - digital signature
      - key encipherment
