{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>OSDU Developer is an open-source solution designed to enable the creation of lightweight, personal instances of the Open Subsurface Data Universe (OSDU\u2122) platform running on the Azure Public Cloud. These personal instances are tailored specifically for engineers and are integrated with the Azure Developer CLI (AZD) for deployment along with a customized environment setup. The solution allows engineers to explore, integrate services, author applications, or work directly with specific technology prior to the transition to a fully managed service. </p> <p>An alternate deployment approach uses a simplified custom ARM template deployment. This method has a slightly more complicated implmentation of parameters with fewer integrations and automation as compared to the AZD deployment. As a result, it is less suited for a tight development loop but can be affective for quick personal deployments.</p> <p>Note</p> <p>Microsoft recommends using Azure Data Manager for Energy (ADME) for any production workloads and integration testing.</p> <p>This solution aims to create an environment for efficient inner loop workflows, enabling rapid feedback for engineers. It balances user-friendliness with organizational compliance, offering a flexible pattern to work with for an in-depth exploration or expansion of OSDU\u2122 capabilities. By providing enhanced transparency into the underlying components, it empowers developers to gain deeper insights and troubleshoot more effectively. Personal OSDU\u2122 instances offer developers a unique advantage in early-stage development and integration, allowing for rapid prototyping and testing of OSDU\u2122 based solutions. This approach aligns with modern software development practices, emphasizing the importance of rapid iteration and testing in application prototyping and cloud integration scenarios.</p> <p></p> <ul> <li>Observability: Direct access to the underlying infrastructure and components</li> <li>Faster feedback: Accelerated development loops with established patterns for service development and rapid iteration</li> <li>Compliant: Ability to align with specific organizational standards and security requirements</li> <li>Flexible: Customized environments to suit diverse project needs</li> </ul> Learning Opportunity <p>Learn more about how inner and outer loop concepts can enhance developer productivity by viewing a discussion with Scott Hanselman, VP of Developer Community at Microsoft, on the Planet Argon Podcast: The Fear Factor in Maintainable Software.</p>"},{"location":"#personas","title":"Personas","text":"<p>The OSDU\u2122 platform serves a diverse range of professionals within the energy industry. Each persona may interacts with personal instances in different and unique ways, leveraging different capabilities and features to meet specific needs or challenges. </p> <ul> <li> <p> Application Developers</p> <p>Build applications leveraging APIs with the need to debug and interact efficiently.</p> </li> <li> <p> Data Scientists</p> <p>Analyze data or explore integration options to derive insights using machine learning and statistical methods.</p> </li> <li> <p> Cloud Architects</p> <p>Explore alternate designs and implementations for the platform and integrate it with additional cloud services or AI services.</p> </li> <li> <p> Data Engineers</p> <p>Ensure proper data preparation and ingestion within the ecosystem to derive patterns for larger production datasets.</p> </li> <li> <p> DevOps Engineers</p> <p>Streamline the deployment, monitoring, and maintenance of the platform and applications, ensuring efficient development and operations.</p> </li> <li> <p> Domain Experts</p> <p>Utilize their specialized knowledge to develop domain-specific applications or services within the platform.</p> </li> </ul>"},{"location":"#benefits","title":"Benefits","text":"<p> Transparent: Interact directly with resources and software components within the solution to enhance observability through logs, dashboards, and source code debugging.</p> <p> Affordable: Deploy with minimal resource consumption by omitting costly features like disaster recovery and backups, minimizing operational costs.</p> <p> Configurable: The solution provides adaptable infrastructure to meet various organizational needs, including:</p> Virtual Network InjectionControlled AccessSoftware Isolation <p>Flexible network designs, including site-to-site VPN connections and integration with preexisting networks.</p> <p>Public or private ingress, with the option to layer custom routing solutions for ingress, such as Azure Firewall or Azure Front Door.</p> <p>Override and isolate software configurations as well as extend with custom configurations.</p>"},{"location":"#scenarios","title":"Scenarios","text":"<p>OSDU\u2122 private instances are designed to support a wide range of use cases, catering to various needs within a software development lifecycle. By providing a flexible and customizable environment, it enables developers, engineers, and other professionals to explore and leverage the OSDU\u2122 platform in multiple ways. Here are several key scenarios that illustrate the practical applications of this approach:</p> <ul> <li> <p> Service Development</p> <p>Build, test, debug, and work directly with OSDU\u2122 services and experimental features.</p> </li> <li> <p> Application Development</p> <p>Streamlined development for applications before integration with a managed service offering.</p> </li> <li> <p> Technology Innovation</p> <p>Fork and extend projects to explore deeper integration with various technologies such as Fabric, Co-Pilot, and the Power Platform.</p> </li> <li> <p> Training and Onboarding</p> <p>Train new employees on the OSDU\u2122 platform, offering hands-on experience in a controlled environment.</p> </li> </ul>"},{"location":"#feature-list","title":"Feature List","text":"Feature Description Data Partitions Supports a single data partition, named \"opendes,\" for managing and organizing data within the platform. Schema Loading Automatically loads Well-Known Schemas for efficient data management and validation. Software Locations Utilizes Flux to direct software loading processes to private GitHub repositories and branches. Ingress Supports both public-facing and private network access points. Network Flexibility Enables VNet injection and integration with existing networks, allowing for S2S VPN access. Mesh Observability Provides Istio observability through Kiali dashboards to investigate latency, traffic, errors, and saturation. Elastic Tools Integrates with Elastic Kibana for advanced dev tools, search capabilities, and user management. Application Logging Integrated with Application Insights for detailed service-level logging and metrics monitoring. Initial User Includes initial user setup and configuration for OpenID Connect access. REST Scripts Includes integrated sample REST scripts for easily executing API calls to test and explore functionality. Token Tools Integrates access token tools for easy retrieval of Bearer Access Tokens via Swagger pages and docs."},{"location":"advanced_vnet/","title":"Custom Networks","text":"<p>The provided custom deployment solution is a sample of how to leverage the virtual network (VNet) injection feature. This allows for the integration of the solution into a preexisting network design and ensuring the solution is on an internal network.</p>"},{"location":"advanced_vnet/#planning","title":"Planning","text":"<p>Network planning is crucial when working with AKS on a prexexisting network solution.  This is an advanced topic and the assumption when bringing your own network is that it has been planned properly in advance.</p> <p>Several resources exist that can help on planning networks for AKS and to understand the networking concepts for AKS.</p> <ul> <li> <p>AKS Network Topology and Connectivity</p> </li> <li> <p>Azure CNI Advanced Networking</p> </li> <li> <p>AKS Network Plugin Overviews</p> </li> </ul> <p>Default Solution</p> <p>The default solution implemented uses a simple Virtual Network with a kubernetes Azure CNI Overlay network configuration. One subnet which is provided to the AKS cluster is required, while additional subnets can be enabled for optional features.</p> <ul> <li> <p>Virtual Network CIDR: <code>10.1.0.0/16</code></p> </li> <li> <p>Cluster Nodes Subnet CIDR: <code>10.1.0.0/20</code></p> </li> <li> <p>Bastion Subnet CIDR: <code>10.1.16.0/24</code> (Optional: Feature)</p> </li> <li> <p>Virtual Machine Subnet CIDR: <code>10.1.18.0/24</code> (Optional: Feature)</p> </li> <li> <p>Cluster Pod Subnet CIDR: <code>10.1.20.0/22</code> (Optional: Feature)</p> </li> <li> <p>AKS Service CIDR: <code>172.16.0.0/16</code></p> </li> <li> <p>AKS DNS Service IP: <code>172.16.0.10</code></p> </li> </ul> <p>Custom Solution</p> <p>This custom configuration tutorial will use a pre-created network along with a dedicated Pod Subnet which activates the Azure CNI for dynamic IP allocation network configuration instead.</p> <p>Things to considered when planning.</p> <ul> <li>Virtual network</li> <li> <p>A network can be as large as /8, but has a limit of 65,536 IP Address</p> </li> <li> <p>Subnet</p> </li> <li>A minimum subnet size: (number of nodes + 1) + ((number of nodes + 1) * maximum pods per node that you configure)</li> <li> <p>Example 8 node cluster: (9) + (9 * 30 (default, 30 pods per node)) = 270 (/23 or larger)</p> </li> <li> <p>Kubernetes Service Address </p> </li> <li>Must be smaller then /12</li> </ul> <p>Network Details</p> <p>For this example the following network details will be used.</p> <p></p> <ul> <li> <p>Virtual Network CIDR: <code>172.20.0.0/22</code></p> </li> <li> <p>Cluster Nodes Subnet CIDR: <code>172.20.0.0/24</code></p> </li> <li> <p>Pod Subnet CIDR: <code>172.20.4.0/22</code></p> </li> </ul>"},{"location":"advanced_vnet/#prepare-a-virtual-network","title":"Prepare a virtual network","text":"<p>This section outlines the steps for manually creating a virtual network outside of the solution to simulate just the spoke network.</p> <p>It is important to ensure that the network exists in the same location that the solution will be deployed in.  For this example the location to be used will be the eastus2 region.</p> <p>Resource Group</p> <p>Use the following command to create a new resource group:</p> BashPowershell <pre><code>NETWORK_GROUP='operations'\nAZURE_LOCATION='eastus2'\n\n# resource_group\naz group create --name $NETWORK_GROUP \\\n--location $AZURE_LOCATION\n</code></pre> <pre><code>$NETWORK_GROUP = 'operations'\n$AZURE_LOCATION = 'eastus2'\n\n# resource_group\naz group create --name $NETWORK_GROUP `\n--location $AZURE_LOCATION\n</code></pre> <p>Network Security Group</p> <p>Network Security Groups (NSGs) are essential for securing virtual network resources. NSGs control inbound and outbound traffic to network interfaces (NIC), VMs, and subnets. </p> <p>Use the following commands set up an NSG with rules to allow HTTP and HTTPS traffic.</p> BashPowershell <pre><code>NSG_NAME='custom-vnet-nsg'\n\n# network_security_group\naz network nsg create --name $NSG_NAME \\\n--resource-group $NETWORK_GROUP \\\n--location $AZURE_LOCATION\n\n\n# http_inbound_rule\naz network nsg rule create --name AllowHttpInbound \\\n--nsg-name $NSG_NAME --resource-group $NETWORK_GROUP \\\n--priority 200 --access Allow --direction Inbound \\\n--protocol 'Tcp' --source-address-prefixes 'VirtualNetwork' --source-port-ranges '*' \\\n--destination-address-prefixes '*' --destination-port-ranges '80'\n\n# https_inbound_rule\naz network nsg rule create --name AllowHttpsInbound \\\n--nsg-name $NSG_NAME --resource-group $NETWORK_GROUP \\\n--priority 210 --access Allow --direction Inbound \\\n--protocol 'Tcp' --source-address-prefixes 'VirtualNetwork' --source-port-ranges '*' \\\n--destination-address-prefixes '*' --destination-port-ranges '443'\n</code></pre> <pre><code>$NSG_NAME = 'custom-vnet-nsg'\n\n# network_security_group\naz network nsg create --name $NSG_NAME `\n--resource-group $NETWORK_GROUP `\n--location $AZURE_LOCATION\n\n\n# http_inbound_rule\naz network nsg rule create --name AllowHttpInbound `\n--nsg-name $NSG_NAME --resource-group $NETWORK_GROUP `\n--priority 200 --access Allow --direction Inbound `\n--protocol 'Tcp' --source-address-prefixes 'VirtualNetwork' --source-port-ranges '*' `\n--destination-address-prefixes '*' --destination-port-ranges '80'\n\n# https_inbound_rule\naz network nsg rule create --name AllowHttpsInbound `\n--nsg-name $NSG_NAME --resource-group $NETWORK_GROUP `\n--priority 210 --access Allow --direction Inbound `\n--protocol 'Tcp' --source-address-prefixes 'VirtualNetwork' --source-port-ranges '*' `\n--destination-address-prefixes '*' --destination-port-ranges '443'\n</code></pre> <p>Virtual Network</p> <p>The virtual network is a critical component that enables Azure resources like AKS to communicate effectively. This step involves setting up the required 'ClusterSubnet' and an optional 'PodSubnet'.</p> <p>Use the following commands set up the network with a required subnet for the cluster and an optional subnet for the pods.</p> BashPowershell <pre><code>NETWORK_NAME='custom-vnet'\nVNET_PREFIX='172.20.0.0/22'\n\nCLUSTER_SUBNET_NAME='cluster'\nCLUSTER_SUBNET_PREFIX='172.20.0.0/24'\n\nPOD_SUBNET_NAME='pods'\nPOD_SUBNET_PREFIX='172.20.1.0/24'\n\n# virtual_network\naz network vnet create --name $NETWORK_NAME \\\n--resource-group $NETWORK_GROUP \\\n--location $AZURE_LOCATION \\\n--address-prefix $VNET_PREFIX\n\n# virtual_network_subnet_cluster\naz network vnet subnet create --name $CLUSTER_SUBNET_NAME \\\n--resource-group $NETWORK_GROUP \\\n--vnet-name $NETWORK_NAME \\\n--address-prefix $CLUSTER_SUBNET_PREFIX \\\n--network-security-group $NSG_NAME\n\n# virtual_network_subnet_pods\naz network vnet subnet create --name $POD_SUBNET_NAME \\\n--resource-group $NETWORK_GROUP \\\n--vnet-name $NETWORK_NAME \\\n--address-prefix $POD_SUBNET_PREFIX \\\n--network-security-group $NSG_NAME\n\n# managed_identity\naz identity create --name $NETWORK_NAME \\\n--resource-group $NETWORK_GROUP \\\n--location $AZURE_LOCATION\n\n# managed_identity_principal_id\nIDENTITY_PID=$(az identity show --name $NETWORK_NAME \\\n--resource-group $NETWORK_GROUP \\\n--query \"principalId\" --output tsv)\n\n# managed_identity_id\nNETWORK_IDENTITY=$(az identity show --name $NETWORK_NAME \\\n--resource-group $NETWORK_GROUP \\\n--query \"id\" --output tsv)\n\n# network_id\nNETWORK_ID=$(az network vnet show --name $NETWORK_NAME \\\n--resource-group $NETWORK_GROUP \\\n--query \"id\" -o tsv)\n\n# role_assignment\naz role assignment create --assignee $IDENTITY_PID \\\n--role \"Network Contributor\" \\\n--scope $NETWORK_ID\n</code></pre> <pre><code>$NETWORK_NAME = 'custom-vnet'\n$VNET_PREFIX = '172.20.0.0/22'\n\n$CLUSTER_SUBNET_NAME = 'cluster'\n$CLUSTER_SUBNET_PREFIX = '172.20.0.0/24'\n\n$POD_SUBNET_NAME = 'pods'\n$POD_SUBNET_PREFIX = '172.20.1.0/24'\n\n# virtual_network\naz network vnet create --name $NETWORK_NAME `\n--resource-group $NETWORK_GROUP `\n--location $AZURE_LOCATION `\n--address-prefix $VNET_PREFIX\n\n# virtual_network_subnet_cluster\naz network vnet subnet create --name $CLUSTER_SUBNET_NAME `\n--resource-group $NETWORK_GROUP `\n--vnet-name $NETWORK_NAME `\n--address-prefix $CLUSTER_SUBNET_PREFIX `\n--network-security-group $NSG_NAME\n\n# virtual_network_subnet_pods\naz network vnet subnet create --name $POD_SUBNET_NAME `\n--resource-group $NETWORK_GROUP `\n--vnet-name $NETWORK_NAME `\n--address-prefix $POD_SUBNET_PREFIX `\n--network-security-group $NSG_NAME\n\n# managed_identity\naz identity create --name $NETWORK_NAME `\n--resource-group $NETWORK_GROUP `\n--location $AZURE_LOCATION\n\n# managed_identity_principal_id\n$IDENTITY_PID = az identity show --name $NETWORK_NAME `\n--resource-group $NETWORK_GROUP `\n--query \"principalId\" --output tsv\n\n# managed_identity_id\n$NETWORK_IDENTITY = az identity show --name $NETWORK_NAME `\n--resource-group $NETWORK_GROUP `\n--query \"id\" --output tsv\n\n# network_id\n$NETWORK_ID = az network vnet show --name $NETWORK_NAME `\n--resource-group $NETWORK_GROUP `\n--query \"id\" -o tsv\n\n# role_assignment\naz role assignment create --assignee $IDENTITY_ID `\n--role \"Network Contributor\" `\n--scope $NETWORK_ID\n</code></pre>"},{"location":"advanced_vnet/#initialize-and-configure-solution","title":"Initialize and Configure Solution","text":"<p>This section provides the steps to authenticate your session then initialize a custom environment using Azure Developer CLI (azd).</p> <p>Authenticate and Initialize</p> <p>First, authenticate your session and then initialize a custom environment:</p> BashPowershell <pre><code># authenticate_session\nazd auth login\n\n# create_new_environment\nazd env new custom\n</code></pre> <pre><code># authenticate_session\nazd auth login\n\n# create_new_environment\nazd env new custom\n</code></pre> <p>Configure Environment Variables</p> <p>Set the necessary environment variables for your deployment:</p> BashPowershell <pre><code># define_application_id\nAPP_NAME=&lt;your_ad_application_name&gt;\nazd env set AZURE_CLIENT_ID $(az ad app list --display-name $APP_NAME --query \"[].appId\" -otsv)\n\n# identify_software_repository\nazd env set SOFTWARE_REPOSITORY https://github.com/azure/osdu-developer\nazd env set SOFTWARE_BRANCH main\n\n# enable_feature_toggles\nazd env set ENABLE_POD_SUBNET true\n\n# define_network_configuration\nazd env set VIRTUAL_NETWORK_GROUP $NETWORK_GROUP\nazd env set VIRTUAL_NETWORK_NAME $NETWORK_NAME\nazd env set VIRTUAL_NETWORK_PREFIX $VNET_PREFIX\nazd env set AKS_SUBNET_NAME $CLUSTER_SUBNET_NAME\nazd env set AKS_SUBNET_PREFIX $CLUSTER_SUBNET_PREFIX\nazd env set POD_SUBNET_NAME $POD_SUBNET_NAME\nazd env set POD_SUBNET_PREFIX $POD_SUBNET_PREFIX\nazd env set VIRTUAL_NETWORK_IDENTITY $NETWORK_IDENTITY\n</code></pre> <pre><code># define_application_id\n$APP_NAME = '&lt;your_ad_application_name&gt;'\nazd env set AZURE_CLIENT_ID (az ad app list --display-name $APP_NAME --query \"[].appId\" -otsv)\n\n# identify_software_repository\nazd env set SOFTWARE_REPOSITORY 'https://github.com/azure/osdu-developer'\nazd env set SOFTWARE_BRANCH 'main'\n\n# enable_feature_toggles\nazd env set ENABLE_POD_SUBNET 'true'\n\n# define_network_configuration\nazd env set VIRTUAL_NETWORK_GROUP $NETWORK_GROUP\nazd env set VIRTUAL_NETWORK_NAME $NETWORK_NAME\nazd env set VIRTUAL_NETWORK_PREFIX $VNET_PREFIX\nazd env set AKS_SUBNET_NAME $CLUSTER_SUBNET_NAME\nazd env set AKS_SUBNET_PREFIX $CLUSTER_SUBNET_PREFIX\nazd env set POD_SUBNET_NAME $POD_SUBNET_NAME\nazd env set POD_SUBNET_PREFIX $POD_SUBNET_PREFIX\nazd env set VIRTUAL_NETWORK_IDENTITY $NETWORK_IDENTITY\n</code></pre> <p>Start the Deployment</p> <p>Initiate the deployment using the following command:</p> BashPowershell <pre><code># provision_solution\nazd provision\n</code></pre> <pre><code># provision_solution\nazd provision\n</code></pre>"},{"location":"debugging_airflow/","title":"Airflow","text":"<p>Coming Soon</p>"},{"location":"debugging_istio/","title":"Istio","text":"<p>Coming Soon</p>"},{"location":"debugging_kibana/","title":"Kibana","text":"<p>Coming Soon</p>"},{"location":"debugging_rest/","title":"REST Samples","text":"<p>The solution has an integrated capability for the immediate execution of Rest API's using visual studio code. This integration only occurs if the Azure Developer CLI installation process has been performed.</p> <p>Execution of <code>azd hooks run settings</code> is the command that configures the required integration for VSCode.</p> <p>Execution of the REST Client Scripts requires installation of a VS Code Extension.</p> <p>Locate the rest-scripts in the solution which holds a number of scripts that can be used to execute the API calls and sequence flows directly from within VSCode.  Each script typically has a sequence of API calls that can be executed from top to bottom to learn and understand the formats for calling the APIs or sequences necessary to execute to perform an action flow.</p> <p>The following is an example of how to use these scripts.</p> <p></p>"},{"location":"design_architecture/","title":"Architecture","text":"<p>Personal OSDU\u2122 instances are built using principles from the Azure Well-Architected Framework which provide a set of best practices and design considerations for azure workloads.</p> Learning Opportunity <p>For a deeper understanding read about the Azure Well-Architected Framework.</p>"},{"location":"design_architecture/#iac-declarative-resource-definition","title":"IaC: Declarative Resource Definition","text":"<p>Infrastructure as Code (IaC) uses declarative definitions to specify the desired state of cloud resources. Bicep is a domain-specific language (DSL) used for deploying Azure resources declaratively. It simplifies authoring ARM templates and allows you to define the desired state of your Infrastructure as Code (IaC). Azure Resource Manager (ARM) processes the Bicep file to ensure the Azure environment matches the defined desired state, correcting any drift through redeployment.</p> Learning Opportunity <p>Understand Bicep development with the official Azure Verified Modules.</p>"},{"location":"design_architecture/#gitops-declarative-configuration-management","title":"GitOps: Declarative Configuration Management","text":"<p>GitOps a term introduced by WeaveWorks uses declarative configurations like Kustomize configs, Helm charts to manage software. Instead of scripting everything manually, GitOps uses a set of declarative configuration files that define a software desired state.</p> <p>GitOps uses versioned CI/CD on top of a declarative infrastructure, allowing developers to \"stop scripting and start shipping,\" as Kelsey Hightower put it. This declarative configuration is helpful to define the entire softwarestack as code and continuously deliver changes with confidence to environments.</p> Learning Opportunity <p>Dive Deeper into GitOps for Azure Kubernetes Service.</p>"},{"location":"design_architecture/#cli-command-sequencing","title":"CLI Command Sequencing","text":"<p>The Azure Developer CLI (azd) provides a set of commands to provision and deploy resources to Azure. These commands offer the ability to include hooks to inject custom logic into the deployment process.  This custom logic is written with powershell scripts to ensure cross-platform compatability.</p> <p>This sequence diagram illustrates the interactions within the Azure CLI developer command structures.</p> <pre><code>sequenceDiagram\n    participant Azd as user\n    participant Provision as command\n    participant Azure as azure\n\n\n    rect rgb(191, 223, 255)\n    alt\n    Note over Provision: featureCheck\n    Note over Provision: credCheck\n    end\n    Azd-&gt;&gt;+Provision: azd provision\n    Provision-&gt;&gt;Azure: arm deploy\n    Provision--&gt;&gt;-Azd: complete\n    alt\n    Note over Provision: softwareCheck\n    Note over Provision: entraAuth\n    end\n    end\n\n    rect rgb(144,238,144)\n    alt\n    Note over Provision: firstUser\n    Note over Provision: refreshToken\n    end\n    Azd-&gt;&gt;Provision: azd deploy\n    activate Provision\n    Provision--&gt;&gt;Azd: complete\n    deactivate Provision\n    alt\n    Note over Provision: settingsJson\n    end\n    end</code></pre>"},{"location":"design_architecture/#azure-infrastructure-diagram","title":"Azure Infrastructure Diagram","text":"<p>This diagram provides a broad visual representation of the infrastructure as deployed. It is intended to help illustrate the various components and interactions within Azure.</p> <p></p>"},{"location":"design_architecture/#resource-catagories","title":"Resource Catagories","text":"<ul> <li> <p> Azure Virtual Network</p> <p>Illustrate the default network design.</p> </li> <li> <p> Kubernetes Node Pools</p> <p>Illustrate the design for the cluster nodepools.</p> </li> <li> <p> Storage Resources</p> <p>Illustrate how Storage Accounts and Cosmos Databases connect to the network.</p> </li> <li> <p> Ingress Load Balancers</p> <p>Illustrate how the Load Balancers created by Istio Gateways are available in the network.</p> </li> </ul>"},{"location":"design_architecture/#software","title":"Software","text":"<p>This workspace utilizes a GitOps approach for efficient and reliable software management. This method leverages a Git repository as the source of truth for defining and updating software configurations and deployments within the infrastructure.</p>"},{"location":"design_architecture/#gitops-configuration","title":"GitOps Configuration","text":"<p>A GitOps configuration resides in this Git repository and uses a gitops repository pattern. This repository includes:</p> <ul> <li> <p> Configuration Files</p> <p>YAML files defining the desired state of our components and applications.</p> </li> <li> <p> Charts</p> <p>Helm charts used for defining, installing, and upgrading Kubernetes applications.</p> </li> </ul> Learning Opportunity <p>Understand more about the repo-per-team pattern.</p>"},{"location":"design_architecture/#gitops-advantages","title":"GitOps Advantages","text":"<p>A GitOps approach simplifies the process of deploying and managing software, making it easier to maintain and update, as well as providing a configurable way of leveraging other software configurations by pointing to alternate repositories hosting other configurations. By leveraging this method, we ensure that our deployments can be extended to things that not only include the default software load.</p> <ul> <li> <p> Consistency and Standardization</p> <p>Ensures consistent configurations across different environments.</p> </li> <li> <p> Audit Trails</p> <p>Every change is recorded in Git, providing a clear audit trail.</p> </li> <li> <p> Rollbacks and Recovery</p> <p>Easily revert to previous states if issues arise, enhancing system reliability.</p> </li> <li> <p> Enhanced Security</p> <p>Changes are reviewed through pull requests, increasing security and collaboration.</p> </li> </ul>"},{"location":"design_infrastructure/","title":"Infrastructure","text":"<p>The OSDU\u2122 private instance design utilizes a stamp-based architecture, enabling independent deployment of stamps with varying configurations. This approach allows linear scaling to accommodate multiple deployments across tenants.</p> Learning Opportunity <p>For more information on the Deployment Stamp Pattern, refer to the Azure Architecture Center.</p> <p>The Infrastructure as Code (IaC) implementation consists of a main bicep file with custom bicep pattern modules. These modules, referred to as <code>blades</code>, are organized based on logical groupings of resources. The IaC leverages Azure Verified Modules, which are versioned, reusable, microsoft supported modules that adhere to best practices for deploying specific Azure resources.</p> Learning Opportunity <p>For more details on Bicep Pattern Modules, consult the Azure Verified Modules documentation.</p>"},{"location":"design_infrastructure/#key-concepts","title":"Key Concepts","text":"<ul> <li> Solution: Entry point for infrastructure deployment</li> <li> Blades: Logical groupings of related resources</li> <li> Modules: Azure verified components for specific resources</li> </ul> <pre><code>graph TD\n  Main(\"main.bicep\")\n  BladeNetwork(\"blade_network.bicep\")\n  BladeCommon(\"blade_common.bicep\")\n  BladeManage(\"blade_manage.bicep\")\n  BladePartition(\"blade_partition.bicep\")\n  BladeService(\"blade_service.bicep\")\n\n  Main--&gt;BladeNetwork\n  Main--&gt;BladeCommon\n  Main--&gt;BladeManage\n  Main--&gt;BladePartition\n  Main--&gt;BladeService</code></pre>"},{"location":"design_infrastructure/#main-solution","title":"Main Solution","text":"<p>The <code>main.bicep</code> file orchestrates the entire infrastructure deployment by importing and calling other modules (blades) to create a complete stamp. Key components include:</p>"},{"location":"design_infrastructure/#parameters","title":"Parameters","text":"<p>User provided values for use during the deployment of the solution.  These values can define different configuraiton blocs for things like identity, network, cluster, software, and feature flags.</p> Sample Parameters<pre><code>@description('Use customized server types.')\nparam customVMSize string = ''\n\n@allowed([\n  'External'\n  'Internal'\n  'Both'\n  ''\n])\n@description('Specify the Ingress type for the cluster.')\nparam ingressType string = 'External'\n\n@description('Feature Flag: Enable Storage accounts public access.')\nparam enableBlobPublicAccess bool = false\n</code></pre>"},{"location":"design_infrastructure/#variables","title":"Variables","text":"<p>Declares internal configuration settings and logic decision drivers or naming conventions.</p> Sample Variables<pre><code>@description('Feature Flag: Enable Telemetry')\nvar enableTelemetry = false\n\n@description('Feature Flag to Enable Private Link')\nvar enablePrivateLink = false\n\n@description('Optional. Customer Managed Encryption Key.')\nvar cmekConfiguration = {\n  kvUrl: ''\n  keyName: ''\n  identityId: ''\n}\n</code></pre> <p>Configuration objects (constants) are frequentlydefined as variables for easy maintenance:</p> Sample Configuration Object<pre><code>var configuration = {\n  name: 'main'\n  displayName: 'Main Resources'\n  logs: {\n    sku: 'PerGB2018'\n    retention: 30\n  }\n  partitions: [\n    {\n      name: 'opendes'\n    }\n  ]\n}\n</code></pre>"},{"location":"design_infrastructure/#resources","title":"Resources","text":"<p>Deploys resources using a combination of approaches:</p> <ol> <li>Direct resource declarations in the main Bicep file</li> <li>Custom modules developed for specific functionalities</li> <li>Versioned Bicep modules from the Azure Verified Modules (AVM) registry</li> </ol> <p>This flexible approach allows for efficient resource management and deployment:</p> Sample Module<pre><code>module logAnalytics 'br/public:avm/res/operational-insights/workspace:0.3.4' = {\n  name: '${configuration.name}-log-analytics'\n  params: {\n    name: rg_unique_id\n    location: location\n    enableTelemetry: enableTelemetry\n  }\n}\n</code></pre>"},{"location":"design_infrastructure/#outputs","title":"Outputs","text":"<p>Exposes important information for use in the CLI environment:</p> Sample Output<pre><code>output logAnalyticsWorkspaceId string = logAnalytics.outputs.workspaceId\n</code></pre>"},{"location":"design_infrastructure/#blades","title":"Blades","text":"<p>Blades are organized to facilitate the logical understanding of the infrastructure components. Each blade is responsible for a specific aspect of the infrastructure and depend on other blades. Here's an overview of the blade structure:</p> <ul> <li> <p> Network Blade</p> <p>Manages all networking-related resources, including virtual networks, subnets, and network security groups.</p> </li> <li> <p> Common Blade</p> <p>Deploys shared resources used across the infrastructure, such as Key Vault, Storage Accounts, and monitoring services.</p> </li> <li> <p> Manage Blade</p> <p>Handles management-related resources like virtual machines and bastion hosts for secure remote access.</p> </li> <li> <p> Partition Blade</p> <p>Manages data partitioning resources, including storage accounts and databases for each partition.</p> </li> <li> <p> Service Blade</p> <p>Deploys service-specific resources like AKS clusters, container registries, and application gateways.</p> </li> </ul> <p>Blade Dependencies</p> <pre><code>flowchart TD\n    subgraph MainBicep [\"main.bicep\"]\n        direction LR\n        IdentityResources(\"identity_resources\")\n        MonitoringResources(\"monitoring_resources\")\n        IdentityResources --&gt; MonitoringResources\n    end\n    direction TB\n    MainBicep --&gt; BladeNetwork(\"blade_network.bicep\")\n    BladeNetwork --&gt; BladeCommon(\"blade_common.bicep\")\n    BladeCommon --&gt; BladeManage(\"blade_manage.bicep\")\n    BladeCommon --&gt; BladePartition(\"blade_partition.bicep\")\n    BladeCommon --&gt; BladeService(\"blade_service.bicep\")\n    BladePartition --&gt; BladeService</code></pre>"},{"location":"design_infrastructure/#resources_1","title":"Resources","text":"<p>Each blade is responsible for creating and managing specific Azure resources. Below is an overview of the primary resources deployed by each blade:</p> <p>Network Blade - blade_network.bicep</p> <pre><code>graph TD\n    ConditionalNetwork[\"Network Resources: Conditional Deployments\"]\n    ClusterNSG[\"clusterNetworkSecurityGroup - !vnetInjection\"]\n    BastionNSG[\"bastionNetworkSecurityGroup - !vnetInjection and enableBastion\"]\n    MachineNSG[\"machineNetworkSecurityGroup - !vnetInjection and enableBastion\"]\n    Network[\"network - !vnetInjection\"]\n    CommonResources[\"Common Resources\"]\n    ConditionalNetwork --&gt;|\"!vnetInjection\"| ClusterNSG\n    ConditionalNetwork --&gt;|\"!vnetInjection and enableBastion\"| BastionNSG\n    ConditionalNetwork --&gt;|\"!vnetInjection and enableBastion\"| MachineNSG\n    ConditionalNetwork --&gt;|\"!vnetInjection\"| Network\n    ClusterNSG --&gt; CommonResources\n    BastionNSG --&gt; CommonResources\n    MachineNSG --&gt; CommonResources\n    Network --&gt; CommonResources</code></pre> <p>Common Blade - blade_common.bicep</p> <pre><code>graph TD\n    CommonResources[\"Common Resources\"]\n    AppInsights[\"appInsights\"]\n    KeyVault[\"keyVault\"]\n    KeyVaultSecrets[\"keyVaultSecrets\"]\n    ScriptSshKey[\"scriptSshKey\"]\n    ScriptCertificates[\"scriptCertificates\"]\n    CommonStorage[\"commonStorage\"]\n    ScriptFileShares[\"scriptFileShares\"]\n    CommonDatabase[\"commonDatabase\"]\n    RedisCache[\"redisCache\"]\n    CommonResources --&gt; RedisCache\n    CommonResources --&gt; AppInsights\n    CommonResources --&gt; KeyVault\n    KeyVault --&gt; KeyVaultSecrets\n    KeyVault --&gt; ScriptSshKey\n    KeyVault --&gt; ScriptCertificates\n    KeyVault --&gt; CommonStorage\n    CommonStorage --&gt; ScriptFileShares\n    KeyVault --&gt; CommonDatabase\n</code></pre> <p>Manage Blade - blade_manage.bicep</p> <pre><code>graph TD    \n    ManageResources[\"Manage Resources\"]\n    BastionHost[\"bastionHost - enableBastion\"]\n    VirtualMachine[\"virtualMachine - enableBastion\"]\n    ManageResources --&gt;|\"enableBastion\"| BastionHost\n    BastionHost --&gt; |\"enableBastion\"| VirtualMachine</code></pre> <p>Partition Blade - blade_partition.bicep</p> <pre><code>graph TD\n    PartitionResources[\"Partition Resources\"]\n    PartitionStorage[\"partitionStorage\"]\n    PartitionDatabase[\"partitionDatabase\"]\n    PartitionServiceBus[\"partitionServiceBus\"]\n    BlobUpload[\"blobUpload\"]\n    PartitionSecrets[\"partitionSecrets\"]\n    PartitionResources --&gt; PartitionStorage\n    PartitionResources --&gt; PartitionDatabase\n    PartitionResources --&gt; PartitionServiceBus\n    PartitionStorage --&gt; BlobUpload\n    PartitionServiceBus --&gt; PartitionSecrets   </code></pre> <p>Service Blade - blade_service.bicep</p> <pre><code>graph TD\n    ServiceResources[\"Service Resources\"]\n    ContainerRegistry[\"containerRegistry\"]\n    KubernetesCluster[\"kubernetesCluster\"]\n    NodePool1[\"nodePool1\"]\n    NodePool2[\"nodePool2\"]\n    NodePool3[\"nodePool3\"]\n    FederatedIdentities[\"federatedIdentities\"]\n    RbacVaultStorage[\"rbacVaultStorage\"]\n    RbacPartitionStorage[\"rbacPartitionStorage\"]\n    AppConfiguration[\"appConfiguration\"]\n    AppConfigMap[\"appConfigMap\"]\n    HelmAppConfigProvider[\"helmAppConfigProvider\"]\n    FluxConfiguration[\"fluxConfiguration\"]\n    Prometheus[\"prometheus\"]\n    Grafana[\"grafana\"]\n    DeploymentScript[\"scriptAppConfigAuth\"]\n    ServiceResources --&gt; ContainerRegistry\n    ServiceResources --&gt; KubernetesCluster\n    KubernetesCluster --&gt; NodePool1\n    KubernetesCluster --&gt; NodePool2\n    KubernetesCluster --&gt; NodePool3\n    KubernetesCluster --&gt; FederatedIdentities\n    FederatedIdentities --&gt; RbacVaultStorage\n    FederatedIdentities --&gt; RbacPartitionStorage\n    RbacVaultStorage --&gt; AppConfiguration\n    RbacPartitionStorage --&gt; AppConfiguration\n    KubernetesCluster --&gt; AppConfigMap\n    AppConfiguration --&gt; FluxConfiguration\n    NodePool1 --&gt; FluxConfiguration\n    NodePool2 --&gt; FluxConfiguration\n    NodePool3 --&gt; FluxConfiguration\n    AppConfigMap --&gt; HelmAppConfigProvider\n    HelmAppConfigProvider --&gt; FluxConfiguration\n    FluxConfiguration --&gt;|\"enableMonitoring\"| Prometheus\n    Prometheus --&gt;|\"enableMonitoring\"| Grafana\n    ServiceResources --&gt; DeploymentScript  </code></pre>"},{"location":"design_platform/","title":"Platform","text":"<p>The OSDU\u2122 private instance solution implements industry-leading best practices for security and operational excellence on Azure Kubernetes Service (AKS). These practices are aligned with Microsoft's Secure Future Initiative and are designed to provide a robust, secure, and efficient platform while maintaining developer productivity.</p> Learning Opportunity <p>For more details on Microsoft's security focus, refer to the  Microsoft Secure Future Initiative.</p> <p>This solution implements comprehensive best practices across security controls and operational excellence. The implemented controls and features help ensure:</p> <ul> <li>Strong security posture through infrastructure and application security controls</li> <li>Operational efficiency through automation and DevOps practices</li> <li>Reliable performance through proper scaling and maintenance procedures</li> <li>Simplified maintenance through automated updates and proper backup strategies</li> </ul> Learning Opportunity <p>For more details on Microsoft's Cluster Best Practices, refer to the  AKS Best Practices.</p>"},{"location":"design_platform/#security-controls","title":"Security Controls","text":""},{"location":"design_platform/#infrastructure-security","title":"Infrastructure Security","text":"<ul> <li> <p> Cluster Protection</p> <ul> <li> <p> Microsoft Defender for Containers </p> <p>Comprehensive security monitoring and protection for containerized assets including clusters, nodes, workloads, registries and images.</p> </li> <li> <p> Kubernetes RBAC and Microsoft Entra ID </p> <p>Granular access control by granting users, groups, and service accounts only the minimum required permissions through role-based policies and enhanced Azure authentication.</p> </li> <li> <p> Node Resource Group Lockdown</p> <p>Prevent unauthorized changes to node resource group resources using NRGLockdownPreview feature.</p> </li> </ul> </li> </ul> <ul> <li> <p> Node Security</p> <ul> <li> <p> Azure Linux</p> <p>Azure Linux Container Host is optimized for container workloads on AKS, based on Microsoft's CBL-Mariner Linux distribution.</p> </li> <li> <p> Disable SSH Access</p> <p>Improve security by disabling SSH access to nodes at both cluster and node pool levels using DisableSSHPreview feature.</p> </li> </ul> </li> </ul> <ul> <li> <p> Network Security</p> <ul> <li> <p> API VNet Integration</p> <p>Kubernetes API server projection into the VNET where AKS is deployed.</p> </li> <li> <p> Private Cluster</p> <p>Enable private cluster mode providing public network access without exposure of the AKS API server to the internet.</p> </li> <li> <p> CNI Overlay</p> <p>Enhanced network security with overlay networking, providing logical separation between pod and node networks.</p> </li> <li> <p> NAT Gateway</p> <p>Managed outbound internet connectivity with network isolation capabilities.</p> </li> <li> <p> Service Mesh</p> <p>Istio service mesh for secure service-to-service communication, traffic management, and observability.</p> </li> </ul> </li> </ul>"},{"location":"design_platform/#application-security","title":"Application Security","text":"<ul> <li> <p> Container Security</p> <ul> <li> <p> Image Cleaner</p> <p>Automatic identification and removal of unused images to reduce vulnerability surface.</p> </li> </ul> </li> </ul> <ul> <li> <p> Pod Security</p> <ul> <li> <p> Workload Identity</p> <p>Enable pods to authenticate against Azure services using Microsoft Entra workload identities.</p> </li> <li> <p> Secrets Management</p> <p>Integrate Azure Key Vault with Secrets Store CSI Driver for secure runtime secrets management.</p> </li> <li> <p> Policy Controls</p> <p>Enforce Kubernetes best practices through Azure Policy deployment safeguards.</p> </li> </ul> </li> </ul>"},{"location":"design_platform/#operational-excellence","title":"Operational Excellence","text":""},{"location":"design_platform/#automation-devops","title":"Automation &amp; DevOps","text":"<ul> <li> <p> Deployment &amp; Operations</p> <ul> <li> <p> GitOps</p> <p>Git-based infrastructure and application deployment management.</p> </li> <li> <p> Verified Modules</p> <p>Pre-validated infrastructure modules for consistent and secure deployments.</p> </li> <li> <p> App Configuration</p> <p>Managed service for feature flags and configuration management.</p> </li> </ul> </li> </ul>"},{"location":"design_platform/#scalability-performance","title":"Scalability &amp; Performance","text":"<ul> <li> <p> Performance &amp; Scaling</p> <ul> <li> <p> Node Auto Provisioning</p> <p>Automatic node provisioning for optimal cluster sizing and cost efficiency.</p> </li> <li> <p> KEDA</p> <p>Event-driven autoscaling for Kubernetes workloads.</p> </li> <li> <p> Vertical Pod Autoscaler</p> <p>Automated resource allocation optimization for pods based on usage patterns.</p> </li> </ul> </li> </ul>"},{"location":"design_platform/#maintenance-updates","title":"Maintenance &amp; Updates","text":"<ul> <li> <p> System Updates</p> <ul> <li> <p> Automatic Upgrades</p> <p>Stay current on new features and bug fixes with automated Kubernetes version upgrades.</p> </li> <li> <p> Node OS Updates</p> <p>Linux nodes in AKS get security patches through their distro update channel nightly.</p> </li> </ul> </li> </ul>"},{"location":"design_software/","title":"Software","text":"<p>The OSDU\u2122 private instance design utilizes a stamp-based pattern for software deployment, complementing the infrastructure design. This approach enables adheres to the principles of independent deployment of stamps with varying software configurations.</p>"},{"location":"design_software/#key-concepts","title":"Key Concepts","text":"<ul> <li> Stamp: A complete, independent softwaredeployment of the OSDU platform</li> <li> Components: Middleware layers providing essential services to support OSDU Services</li> <li> Applications: OSDU platform services organized into logical groups of capabilities</li> </ul>"},{"location":"design_software/#software-layout","title":"Software Layout","text":"<p>In our software architecture design, we define three primary software Kustomizations that describe the stamp. A Kustomization is a Flux resource representing a set of defined manifests that Flux should reconcile to the cluster, with dependencies between them.</p> <pre><code>flowchart TD\n  FluxSystemComponents(\"flux-system-components\")\n  FluxSystemApplications(\"flux-system-applications\")\n  FluxSystemExperimental(\"flux-system-experimental\")\n  FluxSystemComponents--&gt;FluxSystemApplications\n  FluxSystemApplications--&gt;FluxSystemExperimental</code></pre> <pre><code>\u251c\u2500\u2500 applications\n\u2502   \u2514\u2500\u2500 kustomize.yaml\n\u251c\u2500\u2500 components\n\u2502   \u2514\u2500\u2500 kustomize.yaml\n\u2514\u2500\u2500 experimental\n    \u2514\u2500\u2500 kustomize.yaml\n</code></pre>"},{"location":"design_software/#components-structure","title":"Components Structure","text":"<p>The Components directory is organized to facilitate the management of various middleware layers essential for our infrastructure. Components have dependency structures in the sequence of configuration, and a naming pattern is used to help facilitate understanding.</p> <pre><code>flowchart TD\n  FluxSystemComponents(\"flux-system-components\")\n  Certs(\"component-certs\")\n  CertsCA(\"component-certs-ca\")\n  CertsCAIssuer(\"component-certs-issuer\")\n  OSDUSystem(\"component-osdu-system\")\n  Cache(\"component-cache\")\n  Database(\"component-database\")\n  Postgresql(\"component-postgresql\")\n  Airflow(\"component-airflow\")\n  Elastic(\"component-elastic\")\n  ElasticStorage(\"component-elastic-storage\")\n  ElasticSearch(\"component-elastic-search\")\n  Mesh(\"component-mesh\")\n  MeshIngress(\"component-mesh-ingress\")\n  Observability(\"component-observability\")\n\n  FluxSystemComponents--&gt;Certs\n  Certs--&gt;CertsCA\n  CertsCA--&gt;CertsCAIssuer\n  CertsCAIssuer--&gt;OSDUSystem\n  OSDUSystem--&gt;Cache\n  OSDUSystem--&gt;Mesh\n  Mesh--&gt;MeshIngress\n  MeshIngress--&gt;Observability\n  OSDUSystem--&gt;Elastic\n  Elastic--&gt;ElasticStorage\n  ElasticStorage--&gt;ElasticSearch\n  OSDUSystem--&gt;Database\n  Database--&gt;Postgresql\n  Postgresql--&gt;Airflow</code></pre> <pre><code>\u2500\u2500 components\n    \u251c\u2500\u2500 airflow\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 namespace.yaml\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 pvc.yaml\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 release.yaml\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 source.yaml\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 vault-secrets.yaml\n    \u251c\u2500\u2500 certs\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 namespace.yaml\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 release.yaml\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 source.yaml\n    \u251c\u2500\u2500 certs-ca\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 certificate.yaml\n    \u251c\u2500\u2500 certs-issuer\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 issuer.yaml\n    \u251c\u2500\u2500 database\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 namespace.yaml\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 postgresql.yaml\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 vault-secrets.yaml\n    \u251c\u2500\u2500 elastic-search\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 elastic-job.yaml\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 elastic-search.yaml\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 kibana.yaml\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 namespace.yaml\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 vault-secrets.yaml\n    \u251c\u2500\u2500 elastic-storage\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 storage-class.yaml\n    \u251c\u2500\u2500 mesh-ingress\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 gateway.yaml\n    \u251c\u2500\u2500 observability\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 grafana.yaml\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 jaeger.yaml\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 kiali.yaml\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 loki.yaml\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 prometheus.yaml\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 subnet_monitoring.yaml\n    \u2514\u2500\u2500 osdu-system\n        \u251c\u2500\u2500 airflow.yaml\n        \u251c\u2500\u2500 cache.yaml\n        \u251c\u2500\u2500 database.yaml\n        \u251c\u2500\u2500 elastic.yaml\n        \u251c\u2500\u2500 mesh.yaml\n        \u251c\u2500\u2500 namespace.yaml\n        \u2514\u2500\u2500 reloader.yaml\n</code></pre>"},{"location":"design_software/#applications-structure","title":"Applications Structure","text":"<p>The Applications directory is organized to facilitate the management of applications that are installed in the platform. </p> <pre><code>flowchart TD\n  FluxSystemApplications(\"flux-system-applications\")\n  Podinfo(\"application-podinfo\")\n  OSDUCore(\"application-osdu-core\")\n  OSDUReference(\"application-osdu-reference\")\n  OSDUAuth(\"application-osdu-auth\")\n\n  FluxSystemApplications--&gt;Podinfo\n  FluxSystemApplications--&gt;OSDUCore\n  FluxSystemApplications--&gt;OSDUReference\n  FluxSystemApplications--&gt;OSDUAuth</code></pre> <pre><code>\u2500\u2500 applications\n\u2502   \u251c\u2500\u2500 osdu-auth\n\u2502   \u2502   \u251c\u2500\u2500 namespace.yaml\n\u2502   \u2502   \u2514\u2500\u2500 release.yaml\n\u2502   \u251c\u2500\u2500 osdu-core\n\u2502   \u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2502   \u251c\u2500\u2500 base.yaml\n\u2502   \u2502   \u251c\u2500\u2500 entitlements.yaml\n\u2502   \u2502   \u251c\u2500\u2500 file.yaml\n\u2502   \u2502   \u251c\u2500\u2500 indexer.yaml\n\u2502   \u2502   \u251c\u2500\u2500 legal.yaml\n\u2502   \u2502   \u251c\u2500\u2500 namespace.yaml\n\u2502   \u2502   \u251c\u2500\u2500 partition.yaml\n\u2502   \u2502   \u251c\u2500\u2500 schema.yaml\n\u2502   \u2502   \u251c\u2500\u2500 search.yaml\n\u2502   \u2502   \u251c\u2500\u2500 storage.yaml\n\u2502   \u2502   \u2514\u2500\u2500 user-init.yaml\n\u2502   \u251c\u2500\u2500 osdu-reference\n\u2502   \u2502   \u251c\u2500\u2500 base.yaml\n\u2502   \u2502   \u251c\u2500\u2500 crs-catalog.yaml\n\u2502   \u2502   \u251c\u2500\u2500 crs-conversion.yaml\n\u2502   \u2502   \u251c\u2500\u2500 namespace.yaml\n\u2502   \u2502   \u2514\u2500\u2500 unit.yaml\n\u2502   \u2514\u2500\u2500 podinfo\n\u2502       \u251c\u2500\u2500 ingress.yaml\n\u2502       \u251c\u2500\u2500 namespace.yaml\n\u2502       \u251c\u2500\u2500 release.yaml\n\u2502       \u2514\u2500\u2500 source.yaml\n</code></pre>"},{"location":"design_software/#osdu-core-structure","title":"OSDU Core Structure","text":"<p>The OSDU Core application is organized to facilitate the management of the OSDU core platform services. Below is the layout:</p> <pre><code>flowchart TD\n  base(\"base\")\n  partition(\"partition\")\n  partition_init(\"partition-init\")\n  entitlements(\"entitlements\")\n  entitlements_init(\"entitlements-init\")\n  legal(\"legal\")\n  indexer(\"indexer\")\n  indexer_queue(\"indexer-queue\")\n  user_init(\"user-init\")\n  schema(\"schema\")\n  schema_init(\"schema-init\")\n  storage(\"storage\")\n  file(\"file\")\n  search(\"search\")\n  workflow(\"workflow\")\n\n  base--&gt;partition\n  partition--&gt;entitlements\n  partition--&gt;partition_init\n  entitlements--&gt;entitlements_init\n  entitlements_init--&gt;user_init\n  partition--&gt;legal\n  legal--&gt;indexer\n  legal--&gt;indexer_queue\n  legal--&gt;schema\n  legal--&gt;workflow\n  schema--&gt;schema_init\n  indexer_queue--&gt;storage\n  indexer_queue--&gt;file\n  indexer_queue--&gt;search</code></pre> <pre><code>\u2500\u2500 osdu-core\n\u00a0\u00a0 \u251c\u2500\u2500 base.yaml\n\u00a0\u00a0 \u251c\u2500\u2500 entitlements.yaml\n\u00a0\u00a0 \u251c\u2500\u2500 file.yaml\n\u00a0\u00a0 \u251c\u2500\u2500 indexer.yaml\n\u00a0\u00a0 \u251c\u2500\u2500 legal.yaml\n\u00a0\u00a0 \u251c\u2500\u2500 namespace.yaml\n\u00a0\u00a0 \u251c\u2500\u2500 partition.yaml\n\u00a0\u00a0 \u251c\u2500\u2500 schema.yaml\n\u00a0\u00a0 \u251c\u2500\u2500 search.yaml\n\u00a0\u00a0 \u251c\u2500\u2500 storage.yaml\n\u00a0\u00a0 \u2514\u2500\u2500 user-init.yaml\n   \u2514\u2500\u2500 workflow.yaml\n</code></pre>"},{"location":"design_software/#osdu-reference-structure","title":"OSDU Reference Structure","text":"<p>The OSDU Reference application is organized to facilitate the management of the OSDU reference platform services. Below is the layout:</p> <pre><code>flowchart TD\n  base(\"base\")\n  unit(\"unit\")\n  crs-catalog(\"crs-catalog\")\n  crs-conversion(\"crs-conversion\")\n\n  base--&gt;unit\n  base--&gt;crs-catalog\n  base--&gt;crs-conversion</code></pre> <pre><code>\u2500\u2500 osdu-reference\n\u00a0\u00a0 \u251c\u2500\u2500 base.yaml\n\u00a0\u00a0 \u251c\u2500\u2500 crs-catalog.yaml\n\u00a0\u00a0 \u251c\u2500\u2500 crs-conversion.yaml\n\u00a0\u00a0 \u251c\u2500\u2500 namespace.yaml\n\u00a0\u00a0 \u2514\u2500\u2500 unit.yaml\n</code></pre>"},{"location":"design_software/#experimental-features","title":"Experimental Features","text":"<p>The Experimental directory is organized to facilitate the management of experimental features.</p> <pre><code>  flowchart TD\n    FluxSystemExperimental(\"flux-system-experimental\")\n    ExperimentalBase(\"experimental-base\")\n    AdminUI(\"experimental-admin-ui\")\n\n    FluxSystemExperimental--&gt;ExperimentalBase\n    ExperimentalBase--&gt;AdminUI</code></pre> <pre><code>\u2500\u2500 experimental\n   \u251c\u2500\u2500 admin-ui\n   \u2502\u00a0\u00a0 \u251c\u2500\u2500 README.md\n   \u2502\u00a0\u00a0 \u251c\u2500\u2500 ingress.yaml\n   \u2502\u00a0\u00a0 \u2514\u2500\u2500 release.yaml\n   \u2514\u2500\u2500 experimental-base\n       \u251c\u2500\u2500 namespace.yaml\n       \u251c\u2500\u2500 osdu-base.yaml\n       \u2514\u2500\u2500 vault-secrets.yaml\n</code></pre>"},{"location":"experimental_adminui/","title":"Admin UI","text":"<p>Coming Soon</p>"},{"location":"feature_flags/","title":"Configuration Flags","text":"<p>Feature flags are configuration settings used to modify the default behavior of an OSDU\u2122 personal instance.</p> <ul> <li> Toggle alternate functionality</li> <li> Deploy  alternate infrastructure</li> <li> Override default settings</li> <li> Configure custom software </li> </ul> <p>CLI Deployment Only</p> <p>Feature flags are implemented as named environment variables which correspond to ARM template parameter objects and are set prior to provisioning.</p> Command <pre><code>azd env set &lt;FLAG&gt; &lt;VALUE&gt;\n</code></pre>"},{"location":"feature_flags/#azure-region-and-subscription","title":"Azure Region and Subscription","text":"<p>Azure subscriptions and region location are set interactively by default but can be directly specified.</p> Feature Flag Description AZURE_SUBSCRIPTION_ID Azure subscription ID for resource deployment AZURE_LOCATION Azure location for resource deployment"},{"location":"feature_flags/#microsoft-entra-id-application","title":"Microsoft Entra ID Application","text":"<p>Application registrations are created automatically with a naming convention of osdu-{environment}-{subscription} but can be manually created and provided.</p> Feature Flag Description AZURE_CLIENT_ID Use an existing Azure AD App Client ID AZURE_CLIENT_PRINCIPAL_OID Skip Principal ID lookup and use provided. AZURE_TENANT_ID Skip Tenant ID lookup and use provided."},{"location":"feature_flags/#custom-infrastructure","title":"Custom Infrastructure","text":"<p>Infrastructure customizations can be modified using the following feature flags.</p> Feature Flag Description CLUSTER_INGRESS Specifies the Ingress type for the cluster (External, Internal, or Both) VMSIZE_SYSTEM_POOL Overrides the default server for the system pool. (4x8 ARM) VMSIZE_ZONE_POOL Overrides the default server for the zone pool. (2x8 ARM) VMSIZE_USER_POOL Overrides the default server for the default pool. (4x8 INTEL) ENABLE_NODE_AUTO_PROVISIONING Enables node auto provisioning (True by default) ENABLE_PRIVATE_CLUSTER Enables private cluster (False by default)"},{"location":"feature_flags/#custom-software","title":"Custom Software","text":"<p>Software customizations can be modified using the following feature flags.</p> Feature Flag Description ENABLE_SOFTWARE Disables loading of all software when set to false (True by default) ENABLE_PRIVATE_SOFTWARE Software from Azure Blob instead of Git Repositories (False by default) ENABLE_OSDU_CORE Disables loading of the osdu core services (True by default) ENABLE_OSDU_REFERENCE Disables loading of the osdu reference services (True by default) SOFTWARE_VERSION Sets the version (branch) of OSDU to be installed (release-0-27) SOFTWARE_REPOSITORY Customizes the repository location used for software definition SOFTWARE_BRANCH Customizes the branch used for software definition"},{"location":"feature_flags/#experimental-software","title":"Experimental Software","text":"<p>Experimental Software can be enabled using the following feature flags.</p> Feature Flag Description ENABLE_EXPERIMENTAL Enables loading of experimental software (False by default) ENABLE_ADMIN_UI Enables loading of the Admin UI (False by default)"},{"location":"feature_flags/#enable-vnet-injection","title":"Enable VNET Injection","text":"<p>Modify the network configuration for use with a pre-existing virtual network.</p> Feature Flag Description VIRTUAL_NETWORK_GROUP Resource group of the existing virtual network VIRTUAL_NETWORK_NAME Name of the existing virtual network VIRTUAL_NETWORK_PREFIX Address prefix of the existing virtual network VIRTUAL_NETWORK_IDENTITY Managed identity associated with the existing virtual network AKS_SUBNET_NAME Name of the subnet for AKS within the existing virtual network AKS_SUBNET_PREFIX Address prefix for the AKS subnet POD_SUBNET_NAME Name of the subnet for Pods within the existing virtual network POD_SUBNET_PREFIX Address prefix for the Pod subnet"},{"location":"getting_started/","title":"Getting Started","text":"<p>Prerequisites and configuration steps for deploying personal OSDU\u2122 instances in an Azure Subscription.</p>"},{"location":"getting_started/#subscription-quota","title":"Subscription Quota","text":"<p>It is recommended to have at least 50 vCPUs in a region for vCPU families along with the ability to deploy Cosmos DB instances which can be resource constrained in some regions.  Defaults can be increased by requesting a quota increase.</p> <p>Ensure Sufficient Compute Quota per Region</p> VM Types Compute Family Series Standard ARM Generation Standard Dpdsv6 Family vCPUs Burstable Intel Generation Standard Bsv2 Family vCPUS <p>Use the following command to validate the availability of servers in a region:</p> BashPowerShell <pre><code>LOCATION=\"eastus2\"        # ie: eastus2, centralus\nVM_PATTERN=\"Standard_D\"   # ie: Standard_D, Standard_B\n\naz vm list-skus \\\n  --location \"$LOCATION\" \\\n  --query \"[?resourceType=='virtualMachines'] \\\n  | [?contains(locationInfo[0].zones, '1') &amp;&amp; contains(locationInfo[0].zones, '2') &amp;&amp; contains(locationInfo[0].zones, '3')] \\\n  | [?restrictions[0]==null] \\\n  | [?starts_with(name, '$VM_PATTERN')].{ResourceType:resourceType, Locations:locations[0], Name:name, Zones:join(',', locationInfo[0].zones), Restrictions:join('; ', restrictions[*].reasonCode || ['None'])}\" \\\n  -o table\n</code></pre> <pre><code>$LOCATION=\"eastus2\"       # ie: eastus2, centralus\n$VM_PATTERN=\"Standard_D\"  # ie: Standard_D, Standard_B\n\naz vm list-skus `\n  --location \"$LOCATION\" `\n  --query \"[?resourceType=='virtualMachines'] `\n  | [?contains(locationInfo[0].zones, '1') &amp;&amp; contains(locationInfo[0].zones, '2') &amp;&amp; contains(locationInfo[0].zones, '3')] `\n  | [?restrictions[0]==null] `\n  | [?starts_with(name, '$VM_PATTERN')].{ResourceType:resourceType, Locations:locations[0], Name:name, Zones:join(',', locationInfo[0].zones), Restrictions:join('; ', restrictions[*].reasonCode || ['None'])}\" `\n  -o table\n</code></pre> Quota Name Minimum Quantity Total Regional vCPUs 100 Standard Dpdsv6 Family vCPUs 50 Standard Bsv2 Family vCPUs 50 <p>Available Cosmos DB Regions</p> <p>Use the following command to determine the availability of Cosmos DB regions:</p> BashPowerShell <pre><code>az provider show --namespace Microsoft.DocumentDB \\\n  --query \"resourceTypes[?resourceType=='databaseAccounts'].locations\" \\\n  --output json\n</code></pre> <pre><code>az provider show --namespace Microsoft.DocumentDB `\n  --query \"resourceTypes[?resourceType=='databaseAccounts'].locations\" `\n  --output json\n</code></pre>"},{"location":"getting_started/#preview-features","title":"Preview Features","text":"<p>To use AKS Automatic in preview, you must register several feature flags. Register the following features using the az feature register command.</p> Command <pre><code>az feature register --namespace Microsoft.ContainerService --name EnableAPIServerVnetIntegrationPreview\naz feature register --namespace Microsoft.ContainerService --name NRGLockdownPreview\naz feature register --namespace Microsoft.ContainerService --name SafeguardsPreview\naz feature register --namespace Microsoft.ContainerService --name NodeAutoProvisioningPreview\naz feature register --namespace Microsoft.ContainerService --name DisableSSHPreview\naz feature register --namespace Microsoft.ContainerService --name AutomaticSKUPreview\n</code></pre> <p>After the features are registered, refresh the registration of the Microsoft.ContainerService resource provider:</p> Command <pre><code>az provider register --namespace Microsoft.ContainerService\n</code></pre> <p>Verify Registration Status</p> <p>Check the registration status using the following command. It may take a few minutes for the status to show Registered:</p> Command <pre><code>az feature show --namespace Microsoft.ContainerService --name AutomaticSKUPreview\n</code></pre>"},{"location":"getting_started/#resource-providers","title":"Resource Providers","text":"<p>The following Azure Resource Providers must be registered in your subscription.</p> <p>Register Resource Providers</p> <p>For instructions to register providers refer to the Azure Resource Providers and Types documentation.</p> Resource Provider Description Microsoft.AlertsManagement Manages alerts and notifications for Azure resources Microsoft.AppConfiguration Manages application settings and feature flags Microsoft.Authorization Manages access control and permissions for Azure resources Microsoft.Cache Manages Azure Cache for Redis instances Microsoft.CloudShell Provides an interactive command-line shell experience in the Azure portal Microsoft.Compute Manages virtual machines, virtual machine scale sets, and related resources Microsoft.ContainerRegistry Manages container registries for storing and managing container images Microsoft.ContainerService Manages Kubernetes clusters and related resources Microsoft.Dashboard Creates and manages dashboards for visualizing Azure resources Microsoft.DocumentDB Manages Azure Cosmos DB databases and collections Microsoft.Insights Provides monitoring and diagnostics for Azure resources Microsoft.KeyVault Safeguards and manages cryptographic keys and secrets Microsoft.KubernetesConfiguration Manages Azure Kubernetes Service (AKS) clusters and related resources Microsoft.ManagedIdentity Provides an identity for Azure resources without the need for credentials Microsoft.Monitor Provides monitoring and alerting capabilities for Azure resources Microsoft.Network Manages virtual networks, network security groups, and related resources Microsoft.OperationalInsights Provides log analytics and monitoring for Azure resources Microsoft.OperationsManagement Manages and monitors the health and performance of Azure resources Microsoft.Resources Manages Azure Resource Manager resources and resource groups Microsoft.ServiceBus Provides reliable messaging and publish/subscribe capabilities Microsoft.Storage Manages Azure Storage accounts and resources"},{"location":"getting_started/#required-role-assignments","title":"Required Role Assignments","text":"<p>To deploy and manage an OSDU\u2122 personal instance, you need the following Azure role assignments:</p> <p>Assigning Roles</p> <p>For instructions on assigning roles, refer to the Azure Role Assignments documentation.</p> Role Purpose Contributor Manage all resources in the subscription, except for assigning roles or managing policies Role Based Access Control Administrator Manage access to Azure resources by assigning roles using Azure RBAC Resource Policy Contributor Create and manage resource policies"},{"location":"getting_started/#microsoft-entra-app-registration","title":"Microsoft Entra App Registration","text":"<p>Register an application in Microsoft Entra ID.  This is required for OSDU\u2122 personal instance integration with Microsoft Entra ID and delegate access with identity management.</p> <p>These credentials will be used in your ARM template deployment to authenticate and authorize the deployment process.</p> <p>Important</p> <p>Only required when using custom ARM template deployments or using CLI feature setting overrides.</p> <p>Registering Applications</p> <p>For instructions on registering applications, refer to the Quickstart documentation.</p> Name Description/Value Directory (tenant) ID Unique identifier for the Microsoft Entra tenant Application (client) ID Unique identifier for the registered application Object ID Unique identifier for the application object in Microsoft Entra Application (client) Secret Confidential key used to authenticate the application Single-page application redirect URI http://localhost:8080 <p>Secure Your Secret</p> <p>The client secret is sensitive information. Make sure to store it securely and never commit it to version control systems.</p>"},{"location":"install_cli/","title":"Command Line (AZD)","text":"Article Audience <p> Cloud Architects: Working with Infrastructure and Software</p> <p> Application Developer: Working with Services and Applications</p> <p> DevOps Engineers: Automation and Deployment Customizations</p> <p>The Azure Developer CLI (azd) simplifies deployment and management of Azure resources through intuitive commands and built-in best practices. The CLI enables rapid provisioning combined with management tasks via hook-executed scripts. Built-in environment management capabilities support isolated environments with automatic environment variable configuration.</p> Learning Opportunity <p>Learn more about the Azure Developer CLI (azd) and how to use it.</p> <p>Supports Containers as an alternative for local workstation.</p> <p></p> <p></p>"},{"location":"install_cli/#instructions","title":"Instructions","text":"<ol> <li> <p>Clone the repository to your file system.</p> Command <pre><code>git clone https://github.com/Azure/osdu-developer.git\n</code></pre> </li> <li> <p>Authenticate and select the subscription.</p> Command <pre><code>az login --scope https://graph.microsoft.com//.default\nazd auth login\naz account set --subscription &lt;your_subscription_id&gt;\n</code></pre> </li> <li> <p>Enable required features.</p> Command <pre><code>azd config set alpha.resourceGroupDeployments on\n</code></pre> </li> <li> <p>Initialize the environment and enable any feature flags.</p> Command <pre><code>azd init -e &lt;your_env_name&gt;\nazd env set &lt;feature_flag&gt; &lt;value&gt;\n</code></pre> </li> <li> <p>Deploy the solution.</p> Command <pre><code>azd provision\n</code></pre> <p>Warning</p> <p>Deployment can exceed 1 hour. For timeouts execute <code>azd provision</code> again to continue.</p> </li> </ol>"},{"location":"install_portal/","title":"Portal Template (ARM)","text":"Article Audience <p> Domain Experts: Working with OSDU services.</p> <p> Data Scientists: Working with data and machine learning.</p> <p> Data Engineers: Working with data and databases.</p> <p>The Azure Resource Manager (ARM) custom template deployment provides a simple way to provision the solution through the Azure Portal. This method uses a pre-configured ARM template that has been transpiled from Bicep, enabling rapid deployment through a guided portal experience.</p> Learning Opportunity <p>Learn more about ARM Templates and how they work in Azure.</p> <p>Warning</p> <p>The template leverages complex configuration objects that are built in a way that can be integrated later with an Azure Managed Application.  This can make configuration of feature flags more challenging.</p>"},{"location":"install_portal/#instructions","title":"Instructions","text":"<ol> <li> <p>Create a Microsoft Entra Application Registration.</p> Collected Values <ul> <li>Application Client Id (clientId)</li> <li>Application Client Secret (clientSecret)</li> <li>Enterprise Application Object Id (principalId)</li> </ul> </li> <li> <p>Open the custom ARM Template deployment.</p> <p></p> </li> <li> <p>Provide the required values.</p> Required Values <ul> <li>Email Address: <code>Valid email address for the admin user</code></li> <li>Application Client Id: <code>Valid Client Id from the app registration</code></li> <li>Application Client Secret: <code>Valid Client Secret from the app registration</code></li> <li>Application Client Principal OID: <code>Valid Enterprise Application Object Id</code></li> </ul> </li> <li> <p>Modify the optional parameters as desired.</p> Optional Parameters <ul> <li>Custom VM Size: <code>Set Custom VM size cluster nodes.</code></li> <li>Ingress Type: <code>Switch: Ingress type to use.</code></li> <li>Enable Blob Public Access: <code>Feature Flag: Enable Blob Storage public access.</code></li> <li>Enable Manage: <code>Feature Flag: Deploy virtual machine with bastion.</code></li> <li>Vm Admin Username: <code>Set admin username for the virtual machine.</code></li> <li>Enable Pod Subnet: <code>Feature Flag: Enhanced AKS subnet configuration.</code></li> <li>Vnet Configuration: <code>Network configuration object.</code></li> <li>Cluster Software: <code>Software configuration object.</code></li> <li>Experimental Software: <code>Experimental Software configuration object.</code></li> <li>Cluster Network: <code>Cluster network configuration object.</code></li> <li>Cluster Network Plugin: <code>Switch: Network plugin to use.</code></li> <li>Cluster Admin Ids: <code>Set cluster admin user ids to enable RBAC.</code></li> </ul> </li> <li> <p>Deploy the Solution.</p> <p>Warning</p> <p>Deployment can exceed 1 hour. Includes both infrastructure and software deployment.</p> </li> <li> <p>Configure Authentication.</p> Steps <ul> <li>Locate the ingress IP address in the AKS service</li> <li>Add a redirect URI to your Entra application:<ul> <li>Format: <code>https://&lt;ingress_ip&gt;/auth/spa/</code></li> <li>Platform type: Single-page application (SPA)</li> </ul> </li> </ul> </li> <li> <p>Validate Access.</p> PortalAPI Access <ul> <li>Check Successful deployment in the resource group deployments</li> <li>Check Successful deployment in the AKS gitops status</li> </ul> <ul> <li>Navigate to <code>https://&lt;ingress_ip&gt;/auth/spa/</code></li> <li>Click Authorize to receive an authorization code</li> <li>Use Get Tokens to retrieve an access token</li> <li>Test the token with service swagger pages</li> </ul> </li> </ol>"},{"location":"install_prerequisites/","title":"Prerequisites","text":"Article Audience <p> Application Developer: Working with Services and Applications</p> <p> Cloud Architects: Working with Infrastructure and Software</p> <p> DevOps Engineers: Automation and Deployment Customizations</p> <p>This guide outlines the software tools you need installed locally to work with the solution. </p>"},{"location":"install_prerequisites/#operating-system-support","title":"Operating System Support","text":"<ul> <li> <p> macOS</p> </li> <li> <p> Linux</p> </li> <li> <p> Windows</p> </li> </ul>"},{"location":"install_prerequisites/#visual-studio-code","title":"Visual Studio Code","text":"<p>Visual Studio Code is a lightweight but powerful source code editor. Install it along with the REST Client Extension for testing and interacting with REST APIs.</p> <p> Download Visual Studio Code</p>"},{"location":"install_prerequisites/#powershell-core","title":"PowerShell Core","text":"<p>PowerShell Core is a cross-platform task automation solution, useful for scripting and automation tasks in our solution.</p> <p> Download PowerShell Core</p>"},{"location":"install_prerequisites/#azure-cli","title":"Azure CLI","text":"<p>The Azure Command-Line Interface (CLI) is a set of commands used to create and manage Azure resources. It's essential for managing your Azure environment.</p> <p> Download Azure CLI</p>"},{"location":"install_prerequisites/#azure-developer-cli","title":"Azure Developer CLI","text":"<p>The Azure Developer CLI (azd) is a command-line tool designed to accelerate the time it takes to get started on Azure. It's particularly useful for Azure development tasks.</p> <p> Download Azure Developer CLI</p>"},{"location":"install_prerequisites/#visual-studio-code-extensions","title":"Visual Studio Code Extensions","text":"<p>After installing Visual Studio Code, please install the following extensions to enahnce your development experience with working with this solution.</p> Name Recommendation Description REST Client Required Allows you to send HTTP requests and view responses directly within VS Code Bicep Required Provides language support for Bicep, a domain-specific language for deploying Azure resources Python Optional Adds rich support for the Python language, including features like IntelliSense and debugging Java Extension Pack Optional A collection of popular extensions for Java development in VS Code"},{"location":"services_core/","title":"Core Services","text":"<p>This repository can be used to hold the source code for the OSDU Core Services.</p> <p>Environment variables can be automatically generated and then be referenced in IntelliJ with the EnvFile plugin.</p>"},{"location":"services_core/#partition-service","title":"Partition Service","text":"<p>The partition service can be run locally in IntelliJ with the following run configuration</p> <pre><code>Build and Run Configuration: SpringBoot\n---------------------------------------\nJava SDK:  java zulu-17\nModule: partition-azure\nClass: opengroup.osdu.partition.provider.azure.PartitionApplication\nVM Options: -javaagent:/&lt;your_full_path&gt;/osdu-developer/src/applicationinsights-agent.jar\n</code></pre> <p>The following environment variables are necessary to run the Partition Service.</p> Variable Value Description <code>APPINSIGHTS_KEY</code> <code>&lt;your_insights_key&gt;</code> Application Insights key <code>KEYVAULT_URI</code> <code>\"https://&lt;your_storage_name&gt;.vault.azure.net\"</code> Key Vault URI <code>AAD_CLIENT_ID</code> <code>&lt;your_client_id&gt;</code> Active Directory client ID <code>SERVER_PORT</code> <code>8080</code> HTTP Server Port <code>SPRING_APPLICATION_NAME</code> <code>partition</code> Spring application name <code>REDIS_DATABASE</code> <code>1</code> Redis database number <code>PARTITION_SPRING_LOGGING_LEVEL</code> <code>INFO</code> Logging level for the Partition service <code>AZURE_ISTIOAUTH_ENABLED</code> <code>false</code> Turn Istio auth off <code>AZURE_ACTIVEDIRECTORY_APP_ID_URI</code> <code>api://&lt;your_client_id&gt;</code> Active Directory app ID URI <code>AZURE_ACTIVEDIRECTORY_SESSION_STATELESS</code> <code>true</code> Enable stateless session for AD"},{"location":"services_core/#testing","title":"Testing","text":"<p>The partition service can be tested locally in IntelliJ with the following run configuration</p> <pre><code>Build and Run Configuration: JUnit\n---------------------------------------\nJava SDK:  Java zulu-17\nModule: partition-test-azure\nAll in package: org.opengroup.osdu.partition\n</code></pre> Variable Value Description <code>ENVIRONMENT</code> <code>&lt;your_environment&gt;</code> local or cloud <code>AZURE_AD_TENANT_ID</code> <code>&lt;your_tenant_id&gt;</code> Azure tenant ID <code>INTEGRATION_TESTER</code> <code>&lt;your_client_id&gt;</code> Azure client ID <code>AZURE_TESTER_SERVICEPRINCIPAL_SECRET</code> <code>&lt;your_client_secret&gt;</code> Azure client secret <code>AZURE_AD_APP_RESOURCE_ID</code> <code>&lt;your_client_id&gt;</code> Azure client ID <code>PARTITION_BASE_URL</code> <code>http://localhost:8080/</code> Service URL"},{"location":"services_core/#entitlements-service","title":"Entitlements Service","text":"<p>The entitlement service can be run locally in IntelliJ with the following run configuration</p> <pre><code>Build and Run Configuration: SpringBoot\n---------------------------------------\nJava SDK:  java zulu-17\nModule: entitlements-v2-azure\nClass: org.opengroup.osdu.entitlements.v2.azure.EntitlementsV2Application\nVM Options: -javaagent:/&lt;your_full_path&gt;/osdu-developer/src/applicationinsights-agent.jar\n</code></pre> Variable Value Description <code>APPINSIGHTS_KEY</code> <code>&lt;your_insights_key&gt;</code> Application Insights key <code>KEYVAULT_URI</code> <code>\"https://${KV_NAME}.vault.azure.net\"</code> Key Vault URI <code>PARTITION_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/partition/v1</code> Partition service endpoint <code>AAD_CLIENT_ID</code> <code>${AZURE_CLIENT_ID}</code> Active Directory client ID <code>SERVER_PORT</code> <code>8080</code> HTTP Server Port <code>SPRING_APPLICATION_NAME</code> <code>entitlements</code> Spring application name <code>LOGGING_LEVEL</code> <code>INFO</code> Logging level for the Entitlements service <code>SERVICE_DOMAIN_NAME</code> <code>dataservices.energy</code> Service domain name <code>ROOT_DATA_GROUP_QUOTA</code> <code>5000</code> Root data group quota <code>REDIS_TTL_SECONDS</code> <code>1</code> Redis TTL in seconds <code>AZURE_ISTIOAUTH_ENABLED</code> <code>true</code> Turn Istio auth on <code>AZURE_ACTIVEDIRECTORY_SESSION_STATELESS</code> <code>true</code> Enable stateless session for AD"},{"location":"services_core/#testing_1","title":"Testing","text":"<p>The entitlement service can be tested locally in IntelliJ with the following run configuration</p> <pre><code>Build and Run Configuration: JUnit\n---------------------------------------\nJava SDK:  Java zulu-17\nModule: entitlementsv2-test-azure\nAll in package: org.opengroup.osdu.entitlements\n</code></pre>"},{"location":"services_core/#legal-service","title":"Legal Service","text":"<p>The legal service can be run locally in IntelliJ with the following run configuration</p> <pre><code>Build and Run Configuration: SpringBoot\n---------------------------------------\nJava SDK:  java zulu-17\nModule: legal-azure\nClass: org.opengroup.osdu.legal.azure.LegalApplication\nVM Options: -javaagent:/&lt;your_full_path&gt;/osdu-developer/src/applicationinsights-agent.jar\n</code></pre> Variable Value Description <code>KV_NAME</code> <code>&lt;your_keyvault_name&gt;</code> Key Vault name <code>AZURE_TENANT_ID</code> <code>&lt;your_tenant_id&gt;</code> Azure tenant ID <code>AZURE_CLIENT_ID</code> <code>&lt;your_client_id&gt;</code> Azure client ID <code>AZURE_CLIENT_SECRET</code> <code>&lt;your_client_secret&gt;</code> Azure client secret <code>APPINSIGHTS_KEY</code> <code>&lt;your_insights_key&gt;</code> Application Insights key <code>KEYVAULT_URI</code> <code>\"https://${KV_NAME}.vault.azure.net\"</code> Key Vault URI <code>AZURE_HOST</code> <code>&lt;your_host_ip&gt;</code> Azure host IP <code>SPRING_APPLICATION_NAME</code> <code>legal</code> Spring application name <code>AAD_CLIENT_ID</code> <code>${AZURE_CLIENT_ID}</code> Active Directory client ID <code>REDIS_DATABASE</code> <code>2</code> Redis database number <code>SERVICEBUS_TOPIC_NAME</code> <code>legaltags</code> Service Bus topic name <code>COSMOSDB_DATABASE</code> <code>osdu-db</code> Cosmos DB database name <code>ENTITLEMENTS_SERVICE_API_KEY</code> <code>OBSOLETE</code> Entitlements service API key <code>LEGAL_SERVICE_REGION</code> <code>us</code> Legal service region <code>PARTITION_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/partition/v1</code> Partition service endpoint <code>ENTITLEMENTS_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/entitlements/v2</code> Entitlements service endpoint <code>AZURE_ISTIO_AUTH_ENABLED</code> <code>true</code> Turn Istio auth on <code>AZURE_PAAS_PODIDENTITY</code> <code>false</code> Azure PaaS pod identity <code>AZURE_PAAS_PODIDENTITY_ISENABLED</code> <code>false</code> Azure PaaS pod identity enabled <code>AZURE_ACTIVEDIRECTORY_APP_ID_URI</code> <code>api://${AZURE_CLIENT_ID}</code> Active Directory app ID URI <code>AZURE_ACTIVEDIRECTORY_SESSION_STATELESS</code> <code>true</code> Enable stateless session for AD"},{"location":"services_core/#testing_2","title":"Testing","text":"<p>The legal service can be tested locally in IntelliJ with the following run configuration</p> <pre><code>Build and Run Configuration: JUnit\n---------------------------------------\nJava SDK:  Java zulu-17\nModule: legal-test-azure\nAll in package: org.opengroup.osdu.legal\n</code></pre>"},{"location":"services_core/#schema-service","title":"Schema Service","text":"<p>The schema service can be run locally in IntelliJ with the following run configuration</p> <pre><code>Build and Run Configuration: SpringBoot\n---------------------------------------\nJava SDK:  java zulu-17\nModule: os-schema-azure\nClass: org.opengroup.osdu.schema.azure.SchemaApplication\nVM Options: -javaagent:/&lt;your_full_path&gt;/osdu-developer/src/applicationinsights-agent.jar\n</code></pre> Variable Value Description <code>KV_NAME</code> <code>&lt;your_keyvault_name&gt;</code> Key Vault name <code>STORAGE_ACCOUNT</code> <code>&lt;your_storage_account&gt;</code> Storage account name <code>AZURE_TENANT_ID</code> <code>&lt;your_tenant_id&gt;</code> Azure tenant ID <code>AZURE_CLIENT_ID</code> <code>&lt;your_client_id&gt;</code> Azure client ID <code>AZURE_CLIENT_SECRET</code> <code>&lt;your_client_secret&gt;</code> Azure client secret <code>APPINSIGHTS_KEY</code> <code>&lt;your_insights_key&gt;</code> Application Insights key <code>KEYVAULT_URI</code> <code>\"https://${KV_NAME}.vault.azure.net\"</code> Key Vault URI <code>AZURE_HOST</code> <code>&lt;your_host_ip&gt;</code> Azure host IP <code>PARTITION_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/partition/v1</code> Partition service endpoint <code>ENTITLEMENTS_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/entitlements/v2</code> Entitlements service endpoint <code>AAD_CLIENT_ID</code> <code>${AZURE_CLIENT_ID}</code> Active Directory client ID <code>SPRING_APPLICATION_NAME</code> <code>schema</code> Spring application name <code>LOG_PREFIX</code> <code>schema</code> Log prefix <code>AZURE_STORAGE_ENABLE_HTTPS</code> <code>true</code> Enable HTTPS for Azure storage <code>COSMOSDB_DATABASE</code> <code>osdu-db</code> Cosmos DB database name <code>ENTITLEMENTS_SERVICE_API_KEY</code> <code>OBSOLETE</code> Entitlements service API key <code>SERVER_PORT</code> <code>8080</code> Server port <code>EVENT_GRID_ENABLED</code> <code>false</code> Enable Event Grid <code>EVENT_GRID_TOPIC</code> <code>schemachangedtopic</code> Event Grid topic <code>SERVICE_BUS_ENABLED</code> <code>true</code> Enable Service Bus <code>SERVICEBUS_TOPIC_NAME</code> <code>schemachangedtopic</code> Service Bus topic name <code>AZURE_PAAS_PODIDENTITY</code> <code>false</code> Azure PaaS pod identity <code>AZURE_ISTIOAUTH_ENABLED</code> <code>true</code> Turn Istio auth on <code>AZURE_PAAS_PODIDENTITY_ISENABLED</code> <code>false</code> Azure PaaS pod identity enabled"},{"location":"services_core/#storage-service","title":"Storage Service","text":"<p>The storage service can be run locally in IntelliJ with the following run configuration</p> <pre><code>Build and Run Configuration: SpringBoot\n---------------------------------------\nJava SDK:  java zulu-17\nModule: storage-azure\nClass: org.opengroup.osdu.storage.provider.azure.StorageApplication\nVM Options: -javaagent:/&lt;your_full_path&gt;/osdu-developer/src/applicationinsights-agent.jar\n</code></pre> Variable Value Description <code>APPINSIGHTS_KEY</code> <code>&lt;your_appinsights_key&gt;</code> Application Insights key <code>KEYVAULT_URI</code> <code>&lt;your_keyvault_uri&gt;</code> Key Vault URI <code>AZURE_HOST</code> <code>&lt;your_host_ip&gt;</code> Azure host IP <code>PARTITION_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/partition/v1</code> Partition service endpoint <code>ENTITLEMENTS_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/entitlements/v2</code> Entitlements service endpoint <code>LEGAL_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/legal/v1</code> Legal service endpoint <code>AAD_CLIENT_ID</code> <code>&lt;your_aad_client_id&gt;</code> Active Directory client ID <code>SPRING_APPLICATION_NAME</code> <code>storage</code> Spring application name <code>AZURE_PAAS_PODIDENTITY</code> <code>false</code> Azure PaaS pod identity <code>AZURE_ISTIOAUTH_ENABLED</code> <code>true</code> Turn Istio auth on <code>AZURE_PAAS_PODIDENTITY_ISENABLED</code> <code>false</code> Azure PaaS pod identity enabled <code>LOG_PREFIX</code> <code>storage</code> Log prefix <code>AZURE_STORAGE_ENABLE_HTTPS</code> <code>true</code> Enable HTTPS for Azure storage <code>COSMOSDB_DATABASE</code> <code>osdu-db</code> Cosmos DB database name <code>SERVER_PORT</code> <code>8080</code> Server port <code>SERVICEBUS_TOPIC_NAME</code> <code>recordstopic</code> Service Bus topic name <code>SERVICEBUS_V2_TOPIC_NAME</code> <code>recordstopic-v2</code> Service Bus topic name (version 2) <code>REDIS_DATABASE</code> <code>4</code> Redis database number <code>ENTITLEMENTS_SERVICE_API_KEY</code> <code>OBSOLETE</code> Entitlements service API key <code>LEGAL_SERVICE_REGION</code> <code>southcentralus</code> Legal service region <code>LEGAL_SERVICEBUS_TOPIC_NAME</code> <code>legaltagschangedtopiceg</code> Legal service bus topic name <code>LEGAL_SERVICEBUS_TOPIC_SUBSCRIPTION</code> <code>eg_sb_legaltagchangedsubscription</code> Legal service bus topic subscription <code>OPA_ENABLED</code> <code>false</code> Enable OPA"},{"location":"services_core/#indexer-service","title":"Indexer Service","text":"<p>The indexer service can be run locally in IntelliJ with the following run configuration</p> <pre><code>Build and Run Configuration: SpringBoot\n---------------------------------------\nJava SDK:  java zulu-17\nModule: indexer-azure\nClass: org.opengroup.osdu.indexer.azure.IndexerAzureApplication\nVM Options: -javaagent:/&lt;your_full_path&gt;/osdu-developer/src/applicationinsights-agent.jar\n</code></pre> Variable Value Description <code>APPINSIGHTS_KEY</code> <code>&lt;your_appinsights_key&gt;</code> Application Insights key <code>KEYVAULT_URI</code> <code>&lt;your_keyvault_uri&gt;</code> Key Vault URI <code>AZURE_HOST</code> <code>&lt;your_host_ip&gt;</code> Azure host IP <code>PARTITION_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/partition/v1</code> Partition service endpoint <code>ENTITLEMENTS_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/entitlements/v2</code> Entitlements service endpoint <code>SCHEMA_SERVICE_URL</code> <code>http://${AZURE_HOST}/api/schema-service/v1</code> Schema service endpoint <code>STORAGE_SERVICE_URL</code> <code>http://${AZURE_HOST}/api/storage/v2</code> Storage service endpoint <code>STORAGE_QUERY_RECORD_HOST</code> <code>http://${AZURE_HOST}/api/storage/v2/query/records</code> Storage service record query endpoint <code>STORAGE_QUERY_RECORD_FOR_CONVERSION_HOST</code> <code>http://${AZURE_HOST}/api/storage/v2/query/records:batch</code> Storage service record batch query endpoint <code>AAD_CLIENT_ID</code> <code>&lt;your_aad_client_id&gt;</code> Active Directory client ID <code>SPRING_APPLICATION_NAME</code> <code>indexer</code> Spring application name <code>AZURE_PAAS_PODIDENTITY</code> <code>false</code> Azure PaaS pod identity <code>AZURE_ISTIOAUTH_ENABLED</code> <code>true</code> Turn Istio auth on <code>AZURE_PAAS_PODIDENTITY_ISENABLED</code> <code>false</code> Azure PaaS pod identity enabled <code>LOG_PREFIX</code> <code>indexer</code> Log prefix"},{"location":"services_core/#search-service","title":"Search Service","text":"<p>The search service can be run locally in IntelliJ with the following run configuration</p> <pre><code>Build and Run Configuration: SpringBoot\n---------------------------------------\nJava SDK:  java zulu-17\nModule: search-azure\nClass: org.opengroup.osdu.search.provider.azure.SearchApplication\nVM Options: -javaagent:/&lt;your_full_path&gt;/osdu-developer/src/applicationinsights-agent.jar\n</code></pre> Variable Value Description <code>APPINSIGHTS_KEY</code> <code>&lt;your_appinsights_key&gt;</code> Application Insights key <code>KEYVAULT_URI</code> <code>&lt;your_keyvault_uri&gt;</code> Key Vault URI <code>AZURE_HOST</code> <code>&lt;your_host_ip&gt;</code> Azure host IP <code>PARTITION_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/partition/v1</code> Partition service endpoint <code>ENTITLEMENTS_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/entitlements/v2</code> Entitlements service endpoint <code>POLICY_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/policy/api/policy/v1</code> Policy service endpoint <code>AAD_CLIENT_ID</code> <code>&lt;your_aad_client_id&gt;</code> Active Directory client ID <code>SPRING_APPLICATION_NAME</code> <code>search</code> Spring application name <code>AZURE_PAAS_PODIDENTITY</code> <code>false</code> Azure PaaS pod identity <code>AZURE_ISTIOAUTH_ENABLED</code> <code>true</code> Turn Istio auth on <code>AZURE_PAAS_PODIDENTITY_ISENABLED</code> <code>false</code> Azure PaaS pod identity enabled <code>LOG_PREFIX</code> <code>search</code> Log prefix <code>SEARCH_SERVICE_SPRING_LOGGING_LEVEL</code> <code>DEBUG</code> Logging level for the Search service <code>ENTITLEMENTS_SERVICE_API_KEY</code> <code>OBSOLETE</code> API Key for Entitlements <code>POLICY_SERVICE_ENABLED</code> <code>false</code> Enable Policy Service <code>COSMOSDB_DATABASE</code> <code>osdu-db</code> Cosmos DB database name <code>REDIS_DATABASE</code> <code>5</code> Redis database number <code>ENVIRONMENT</code> <code>evt</code> Environment <code>ELASTIC_CACHE_EXPIRATION</code> <code>1</code> Elastic cache expiration <code>MAX_CACHE_VALUE_SIZE</code> <code>60</code> Maximum cache value size <code>PARTITION_SERVICE_ENDPOINT</code> <code>http://partition/api/partition/v1</code> Partition service endpoint <code>ENTITLEMENTS_SERVICE_ENDPOINT</code> <code>http://entitlements/api/entitlements/v2</code> Entitlements service endpoint <code>POLICY_SERVICE_ENDPOINT</code> <code>http://policy/api/policy/v1</code> Policy service endpoint"},{"location":"services_core/#file-service","title":"File Service","text":"<p>The file service can be run locally in IntelliJ with the following run configuration</p> <pre><code>Build and Run Configuration: SpringBoot\n---------------------------------------\nJava SDK:  java zulu-17\nModule: file-azure\nClass: org.opengroup.osdu.file.provider.azure.FileAzureApplication\nVM Options: -javaagent:/&lt;your_full_path&gt;/osdu-developer/src/applicationinsights-agent.jar\n</code></pre> Variable Value Description <code>APPINSIGHTS_KEY</code> <code>&lt;your_appinsights_key&gt;</code> Application Insights key <code>KEYVAULT_URI</code> <code>&lt;your_keyvault_uri&gt;</code> Key Vault URI <code>AZURE_HOST</code> <code>&lt;your_host_ip&gt;</code> Azure host IP <code>PARTITION_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/partition/v1</code> Partition service endpoint <code>OSDU_ENTITLEMENTS_URL</code> <code>http://${AZURE_HOST}/api/entitlements/v2</code> Entitlements service endpoint <code>AAD_CLIENT_ID</code> <code>&lt;your_aad_client_id&gt;</code> Active Directory client ID <code>SPRING_APPLICATION_NAME</code> <code>file</code> Spring application name <code>AZURE_PAAS_PODIDENTITY</code> <code>false</code> Azure PaaS pod identity <code>AZURE_ISTIOAUTH_ENABLED</code> <code>true</code> Turn Istio auth on <code>AZURE_PAAS_PODIDENTITY_ISENABLED</code> <code>false</code> Azure PaaS pod identity enabled <code>LOG_PREFIX</code> <code>file</code> Log prefix"},{"location":"services_core/#workflow-service","title":"Workflow Service","text":"<p>The workflow service can be run locally in IntelliJ with the following run configuration</p> <pre><code>Build and Run Configuration: SpringBoot\n---------------------------------------\nJava SDK:  java zulu-17\nModule: file-azure\nClass: org.opengroup.osdu.workflow.provider.azure.WorkflowAzureApplication\nVM Options: -javaagent:/&lt;your_full_path&gt;/osdu-developer/src/applicationinsights-agent.jar\n</code></pre> Variable Value Description <code>APPINSIGHTS_KEY</code> <code>&lt;your_appinsights_key&gt;</code> Application Insights key <code>APPLICATIONINSIGHTS_CONNECTION_STRING</code> <code>&lt;your_appinsights_connection&gt;</code> Application Insights Connection <code>KEYVAULT_URI</code> <code>&lt;your_keyvault_uri&gt;</code> Key Vault URI <code>AZURE_HOST</code> <code>&lt;your_host_ip&gt;</code> Azure host IP <code>PARTITION_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/partition/v1/</code> Partition service endpoint <code>OSDU_ENTITLEMENTS_URL</code> <code>http://${AZURE_HOST}/api/entitlements/v2</code> Entitlements service endpoint <code>OSDU_AIRFLOW_URL</code> <code>https://${AZURE_HOST}/airflow</code> Airflow URL <code>AAD_CLIENT_ID</code> <code>&lt;your_aad_client_id&gt;</code> Active Directory client ID <code>SPRING_APPLICATION_NAME</code> <code>workflow</code> Spring application name <code>LOG_PREFIX</code> <code>workflow</code> Log prefix <code>COSMOSDB_DATABASE</code> <code>osdu-db</code> Cosmos DB database name <code>COSMOSDB_SYSTEM_DATABASE</code> <code>osdu-system-db</code> Cosmos DB system database name <code>AIRFLOW_STORAGE_ACCOUNT_NAME</code> <code>&lt;your_storage_account_name&gt;</code> Airflow storage account name <code>AZURE_PAAS_PODIDENTITY</code> <code>false</code> Azure PaaS pod identity <code>AZURE_ISTIOAUTH_ENABLED</code> <code>true</code> Turn Istio auth on <code>AZURE_PAAS_PODIDENTITY_ISENABLED</code> <code>false</code> Azure PaaS pod identity enabled <code>OSDU_AIRFLOW_USERNAME</code> <code>&lt;your_airflow_username&gt;</code> Airflow username <code>OSDU_AIRFLOW_PASSWORD</code> <code>&lt;your_airflow_password</code> Airflow password <code>OSDU_AIRFLOW_VERSION2_ENABLED</code> <code>true</code> Enable Airflow version 2 <code>DP_AIRFLOW_FOR_SYSTEM_DAG</code> <code>false</code> Use Airflow for system DAGs <code>IGNORE_DAGCONTENT</code> <code>true</code> Ignore DAG content <code>IGNORE_CUSTOMOPERATORCONTENT</code> <code>true</code> Ignore custom operator content <code>SERVER_PORT</code> <code>8080</code> Server port <p>// ... end of file ...</p>"},{"location":"services_core_entitlements/","title":"Entitlements","text":"<p>The entitlement service can be run locally in editors with the following configuration.</p> <pre><code>Build and Run Configuration: SpringBoot\n---------------------------------------\nJava SDK:  java zulu-17\nModule: entitlements-v2-azure\nClass: org.opengroup.osdu.entitlements.v2.azure.EntitlementsV2Application\nVM Options: -javaagent:/&lt;your_full_path&gt;/osdu-developer/src/applicationinsights-agent.jar\n</code></pre> Variable Value Description <code>APPINSIGHTS_KEY</code> <code>&lt;your_insights_key&gt;</code> Application Insights key <code>KEYVAULT_URI</code> <code>\"https://${KV_NAME}.vault.azure.net\"</code> Key Vault URI <code>PARTITION_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/partition/v1</code> Partition service endpoint <code>AAD_CLIENT_ID</code> <code>${AZURE_CLIENT_ID}</code> Active Directory client ID <code>SERVER_PORT</code> <code>8080</code> HTTP Server Port <code>SPRING_APPLICATION_NAME</code> <code>entitlements</code> Spring application name <code>LOGGING_LEVEL</code> <code>INFO</code> Logging level for the Entitlements service <code>SERVICE_DOMAIN_NAME</code> <code>dataservices.energy</code> Service domain name <code>ROOT_DATA_GROUP_QUOTA</code> <code>5000</code> Root data group quota <code>REDIS_TTL_SECONDS</code> <code>1</code> Redis TTL in seconds <code>AZURE_ISTIOAUTH_ENABLED</code> <code>true</code> Turn Istio auth on <code>AZURE_ACTIVEDIRECTORY_SESSION_STATELESS</code> <code>true</code> Enable stateless session for AD"},{"location":"services_core_entitlements/#testing","title":"Testing","text":"<p>The entitlement service can be tested locally in IntelliJ with the following run configuration</p> <pre><code>Build and Run Configuration: JUnit\n---------------------------------------\nJava SDK:  Java zulu-17\nModule: entitlementsv2-test-azure\nAll in package: org.opengroup.osdu.entitlements\n</code></pre>"},{"location":"services_core_file/","title":"File","text":"<p>The file service can be run locally in editors with the following configuration.</p> <pre><code>Build and Run Configuration: SpringBoot\n---------------------------------------\nJava SDK:  java zulu-17\nModule: file-azure\nClass: org.opengroup.osdu.file.provider.azure.FileAzureApplication\nVM Options: -javaagent:/&lt;your_full_path&gt;/osdu-developer/src/applicationinsights-agent.jar\n</code></pre> Variable Value Description <code>APPINSIGHTS_KEY</code> <code>&lt;your_appinsights_key&gt;</code> Application Insights key <code>KEYVAULT_URI</code> <code>&lt;your_keyvault_uri&gt;</code> Key Vault URI <code>AZURE_HOST</code> <code>&lt;your_host_ip&gt;</code> Azure host IP <code>PARTITION_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/partition/v1</code> Partition service endpoint <code>OSDU_ENTITLEMENTS_URL</code> <code>http://${AZURE_HOST}/api/entitlements/v2</code> Entitlements service endpoint <code>AAD_CLIENT_ID</code> <code>&lt;your_aad_client_id&gt;</code> Active Directory client ID <code>SPRING_APPLICATION_NAME</code> <code>file</code> Spring application name <code>AZURE_PAAS_PODIDENTITY</code> <code>false</code> Azure PaaS pod identity <code>AZURE_ISTIOAUTH_ENABLED</code> <code>true</code> Turn Istio auth on <code>AZURE_PAAS_PODIDENTITY_ISENABLED</code> <code>false</code> Azure PaaS pod identity enabled <code>LOG_PREFIX</code> <code>file</code> Log prefix"},{"location":"services_core_indexer/","title":"Indexer","text":"<p>The indexer service can be run locally in editors with the following configuration.</p> <pre><code>Build and Run Configuration: SpringBoot\n---------------------------------------\nJava SDK:  java zulu-17\nModule: indexer-azure\nClass: org.opengroup.osdu.indexer.azure.IndexerAzureApplication\nVM Options: -javaagent:/&lt;your_full_path&gt;/osdu-developer/src/applicationinsights-agent.jar\n</code></pre> Variable Value Description <code>APPINSIGHTS_KEY</code> <code>&lt;your_appinsights_key&gt;</code> Application Insights key <code>KEYVAULT_URI</code> <code>&lt;your_keyvault_uri&gt;</code> Key Vault URI <code>AZURE_HOST</code> <code>&lt;your_host_ip&gt;</code> Azure host IP <code>PARTITION_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/partition/v1</code> Partition service endpoint <code>ENTITLEMENTS_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/entitlements/v2</code> Entitlements service endpoint <code>SCHEMA_SERVICE_URL</code> <code>http://${AZURE_HOST}/api/schema-service/v1</code> Schema service endpoint <code>STORAGE_SERVICE_URL</code> <code>http://${AZURE_HOST}/api/storage/v2</code> Storage service endpoint <code>STORAGE_QUERY_RECORD_HOST</code> <code>http://${AZURE_HOST}/api/storage/v2/query/records</code> Storage service record query endpoint <code>STORAGE_QUERY_RECORD_FOR_CONVERSION_HOST</code> <code>http://${AZURE_HOST}/api/storage/v2/query/records:batch</code> Storage service record batch query endpoint <code>AAD_CLIENT_ID</code> <code>&lt;your_aad_client_id&gt;</code> Active Directory client ID <code>SPRING_APPLICATION_NAME</code> <code>indexer</code> Spring application name <code>AZURE_PAAS_PODIDENTITY</code> <code>false</code> Azure PaaS pod identity <code>AZURE_ISTIOAUTH_ENABLED</code> <code>true</code> Turn Istio auth on <code>AZURE_PAAS_PODIDENTITY_ISENABLED</code> <code>false</code> Azure PaaS pod identity enabled <code>LOG_PREFIX</code> <code>indexer</code> Log prefix"},{"location":"services_core_legal/","title":"Legal","text":"<p>The legal service can be run locally in editors with the following configuration.</p> <pre><code>Build and Run Configuration: SpringBoot\n---------------------------------------\nJava SDK:  java zulu-17\nModule: legal-azure\nClass: org.opengroup.osdu.legal.azure.LegalApplication\nVM Options: -javaagent:/&lt;your_full_path&gt;/osdu-developer/src/applicationinsights-agent.jar\n</code></pre> Variable Value Description <code>KV_NAME</code> <code>&lt;your_keyvault_name&gt;</code> Key Vault name <code>AZURE_TENANT_ID</code> <code>&lt;your_tenant_id&gt;</code> Azure tenant ID <code>AZURE_CLIENT_ID</code> <code>&lt;your_client_id&gt;</code> Azure client ID <code>AZURE_CLIENT_SECRET</code> <code>&lt;your_client_secret&gt;</code> Azure client secret <code>APPINSIGHTS_KEY</code> <code>&lt;your_insights_key&gt;</code> Application Insights key <code>KEYVAULT_URI</code> <code>\"https://${KV_NAME}.vault.azure.net\"</code> Key Vault URI <code>AZURE_HOST</code> <code>&lt;your_host_ip&gt;</code> Azure host IP <code>SPRING_APPLICATION_NAME</code> <code>legal</code> Spring application name <code>AAD_CLIENT_ID</code> <code>${AZURE_CLIENT_ID}</code> Active Directory client ID <code>REDIS_DATABASE</code> <code>2</code> Redis database number <code>SERVICEBUS_TOPIC_NAME</code> <code>legaltags</code> Service Bus topic name <code>COSMOSDB_DATABASE</code> <code>osdu-db</code> Cosmos DB database name <code>ENTITLEMENTS_SERVICE_API_KEY</code> <code>OBSOLETE</code> Entitlements service API key <code>LEGAL_SERVICE_REGION</code> <code>us</code> Legal service region <code>PARTITION_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/partition/v1</code> Partition service endpoint <code>ENTITLEMENTS_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/entitlements/v2</code> Entitlements service endpoint <code>AZURE_ISTIO_AUTH_ENABLED</code> <code>true</code> Turn Istio auth on <code>AZURE_PAAS_PODIDENTITY</code> <code>false</code> Azure PaaS pod identity <code>AZURE_PAAS_PODIDENTITY_ISENABLED</code> <code>false</code> Azure PaaS pod identity enabled <code>AZURE_ACTIVEDIRECTORY_APP_ID_URI</code> <code>api://${AZURE_CLIENT_ID}</code> Active Directory app ID URI <code>AZURE_ACTIVEDIRECTORY_SESSION_STATELESS</code> <code>true</code> Enable stateless session for AD"},{"location":"services_core_legal/#testing","title":"Testing","text":"<p>The legal service can be tested locally in IntelliJ with the following run configuration</p> <pre><code>Build and Run Configuration: JUnit\n---------------------------------------\nJava SDK:  Java zulu-17\nModule: legal-test-azure\nAll in package: org.opengroup.osdu.legal\n</code></pre>"},{"location":"services_core_partition/","title":"Partition","text":"<p>The partition service can be run locally in editors with the following configuration.</p> <pre><code>Build and Run Configuration: SpringBoot\n---------------------------------------\nJava SDK:  java zulu-17\nModule: partition-azure\nClass: opengroup.osdu.partition.provider.azure.PartitionApplication\nVM Options: -javaagent:/&lt;your_full_path&gt;/osdu-developer/src/applicationinsights-agent.jar\n</code></pre> <p>The following environment variables are necessary to run the Partition Service.</p> Variable Value Description <code>APPINSIGHTS_KEY</code> <code>&lt;your_insights_key&gt;</code> Application Insights key <code>KEYVAULT_URI</code> <code>\"https://&lt;your_storage_name&gt;.vault.azure.net\"</code> Key Vault URI <code>AAD_CLIENT_ID</code> <code>&lt;your_client_id&gt;</code> Active Directory client ID <code>SERVER_PORT</code> <code>8080</code> HTTP Server Port <code>SPRING_APPLICATION_NAME</code> <code>partition</code> Spring application name <code>REDIS_DATABASE</code> <code>1</code> Redis database number <code>PARTITION_SPRING_LOGGING_LEVEL</code> <code>INFO</code> Logging level for the Partition service <code>AZURE_ISTIOAUTH_ENABLED</code> <code>false</code> Turn Istio auth off <code>AZURE_ACTIVEDIRECTORY_APP_ID_URI</code> <code>api://&lt;your_client_id&gt;</code> Active Directory app ID URI <code>AZURE_ACTIVEDIRECTORY_SESSION_STATELESS</code> <code>true</code> Enable stateless session for AD"},{"location":"services_core_partition/#testing","title":"Testing","text":"<p>The partition service can be tested locally in IntelliJ with the following run configuration</p> <pre><code>Build and Run Configuration: JUnit\n---------------------------------------\nJava SDK:  Java zulu-17\nModule: partition-test-azure\nAll in package: org.opengroup.osdu.partition\n</code></pre> Variable Value Description <code>ENVIRONMENT</code> <code>&lt;your_environment&gt;</code> local or cloud <code>AZURE_AD_TENANT_ID</code> <code>&lt;your_tenant_id&gt;</code> Azure tenant ID <code>INTEGRATION_TESTER</code> <code>&lt;your_client_id&gt;</code> Azure client ID <code>AZURE_TESTER_SERVICEPRINCIPAL_SECRET</code> <code>&lt;your_client_secret&gt;</code> Azure client secret <code>AZURE_AD_APP_RESOURCE_ID</code> <code>&lt;your_client_id&gt;</code> Azure client ID <code>PARTITION_BASE_URL</code> <code>http://localhost:8080/</code> Service URL"},{"location":"services_core_schema/","title":"Schema","text":"<p>The schema service can be run locally in editors with the following configuration.</p> <pre><code>Build and Run Configuration: SpringBoot\n---------------------------------------\nJava SDK:  java zulu-17\nModule: os-schema-azure\nClass: org.opengroup.osdu.schema.azure.SchemaApplication\nVM Options: -javaagent:/&lt;your_full_path&gt;/osdu-developer/src/applicationinsights-agent.jar\n</code></pre> Variable Value Description <code>KV_NAME</code> <code>&lt;your_keyvault_name&gt;</code> Key Vault name <code>STORAGE_ACCOUNT</code> <code>&lt;your_storage_account&gt;</code> Storage account name <code>AZURE_TENANT_ID</code> <code>&lt;your_tenant_id&gt;</code> Azure tenant ID <code>AZURE_CLIENT_ID</code> <code>&lt;your_client_id&gt;</code> Azure client ID <code>AZURE_CLIENT_SECRET</code> <code>&lt;your_client_secret&gt;</code> Azure client secret <code>APPINSIGHTS_KEY</code> <code>&lt;your_insights_key&gt;</code> Application Insights key <code>KEYVAULT_URI</code> <code>\"https://${KV_NAME}.vault.azure.net\"</code> Key Vault URI <code>AZURE_HOST</code> <code>&lt;your_host_ip&gt;</code> Azure host IP <code>PARTITION_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/partition/v1</code> Partition service endpoint <code>ENTITLEMENTS_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/entitlements/v2</code> Entitlements service endpoint <code>AAD_CLIENT_ID</code> <code>${AZURE_CLIENT_ID}</code> Active Directory client ID <code>SPRING_APPLICATION_NAME</code> <code>schema</code> Spring application name <code>LOG_PREFIX</code> <code>schema</code> Log prefix <code>AZURE_STORAGE_ENABLE_HTTPS</code> <code>true</code> Enable HTTPS for Azure storage <code>COSMOSDB_DATABASE</code> <code>osdu-db</code> Cosmos DB database name <code>ENTITLEMENTS_SERVICE_API_KEY</code> <code>OBSOLETE</code> Entitlements service API key <code>SERVER_PORT</code> <code>8080</code> Server port <code>EVENT_GRID_ENABLED</code> <code>false</code> Enable Event Grid <code>EVENT_GRID_TOPIC</code> <code>schemachangedtopic</code> Event Grid topic <code>SERVICE_BUS_ENABLED</code> <code>true</code> Enable Service Bus <code>SERVICEBUS_TOPIC_NAME</code> <code>schemachangedtopic</code> Service Bus topic name <code>AZURE_PAAS_PODIDENTITY</code> <code>false</code> Azure PaaS pod identity <code>AZURE_ISTIOAUTH_ENABLED</code> <code>true</code> Turn Istio auth on <code>AZURE_PAAS_PODIDENTITY_ISENABLED</code> <code>false</code> Azure PaaS pod identity enabled"},{"location":"services_core_search/","title":"Search","text":"<p>The search service can be run locally in editors with the following configuration.</p> <pre><code>Build and Run Configuration: SpringBoot\n---------------------------------------\nJava SDK:  java zulu-17\nModule: search-azure\nClass: org.opengroup.osdu.search.provider.azure.SearchApplication\nVM Options: -javaagent:/&lt;your_full_path&gt;/osdu-developer/src/applicationinsights-agent.jar\n</code></pre> Variable Value Description <code>APPINSIGHTS_KEY</code> <code>&lt;your_appinsights_key&gt;</code> Application Insights key <code>KEYVAULT_URI</code> <code>&lt;your_keyvault_uri&gt;</code> Key Vault URI <code>AZURE_HOST</code> <code>&lt;your_host_ip&gt;</code> Azure host IP <code>PARTITION_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/partition/v1</code> Partition service endpoint <code>ENTITLEMENTS_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/entitlements/v2</code> Entitlements service endpoint <code>POLICY_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/policy/api/policy/v1</code> Policy service endpoint <code>AAD_CLIENT_ID</code> <code>&lt;your_aad_client_id&gt;</code> Active Directory client ID <code>SPRING_APPLICATION_NAME</code> <code>search</code> Spring application name <code>AZURE_PAAS_PODIDENTITY</code> <code>false</code> Azure PaaS pod identity <code>AZURE_ISTIOAUTH_ENABLED</code> <code>true</code> Turn Istio auth on <code>AZURE_PAAS_PODIDENTITY_ISENABLED</code> <code>false</code> Azure PaaS pod identity enabled <code>LOG_PREFIX</code> <code>search</code> Log prefix <code>SEARCH_SERVICE_SPRING_LOGGING_LEVEL</code> <code>DEBUG</code> Logging level for the Search service <code>ENTITLEMENTS_SERVICE_API_KEY</code> <code>OBSOLETE</code> API Key for Entitlements <code>POLICY_SERVICE_ENABLED</code> <code>false</code> Enable Policy Service <code>COSMOSDB_DATABASE</code> <code>osdu-db</code> Cosmos DB database name <code>REDIS_DATABASE</code> <code>5</code> Redis database number <code>ENVIRONMENT</code> <code>evt</code> Environment <code>ELASTIC_CACHE_EXPIRATION</code> <code>1</code> Elastic cache expiration <code>MAX_CACHE_VALUE_SIZE</code> <code>60</code> Maximum cache value size <code>PARTITION_SERVICE_ENDPOINT</code> <code>http://partition/api/partition/v1</code> Partition service endpoint <code>ENTITLEMENTS_SERVICE_ENDPOINT</code> <code>http://entitlements/api/entitlements/v2</code> Entitlements service endpoint <code>POLICY_SERVICE_ENDPOINT</code> <code>http://policy/api/policy/v1</code> Policy service endpoint"},{"location":"services_core_storage/","title":"Storage","text":"<p>The storage service can be run locally in editors with the following configuration.</p> <pre><code>Build and Run Configuration: SpringBoot\n---------------------------------------\nJava SDK:  java zulu-17\nModule: storage-azure\nClass: org.opengroup.osdu.storage.provider.azure.StorageApplication\nVM Options: -javaagent:/&lt;your_full_path&gt;/osdu-developer/src/applicationinsights-agent.jar\n</code></pre> Variable Value Description <code>APPINSIGHTS_KEY</code> <code>&lt;your_appinsights_key&gt;</code> Application Insights key <code>KEYVAULT_URI</code> <code>&lt;your_keyvault_uri&gt;</code> Key Vault URI <code>AZURE_HOST</code> <code>&lt;your_host_ip&gt;</code> Azure host IP <code>PARTITION_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/partition/v1</code> Partition service endpoint <code>ENTITLEMENTS_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/entitlements/v2</code> Entitlements service endpoint <code>LEGAL_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/legal/v1</code> Legal service endpoint <code>AAD_CLIENT_ID</code> <code>&lt;your_aad_client_id&gt;</code> Active Directory client ID <code>SPRING_APPLICATION_NAME</code> <code>storage</code> Spring application name <code>AZURE_PAAS_PODIDENTITY</code> <code>false</code> Azure PaaS pod identity <code>AZURE_ISTIOAUTH_ENABLED</code> <code>true</code> Turn Istio auth on <code>AZURE_PAAS_PODIDENTITY_ISENABLED</code> <code>false</code> Azure PaaS pod identity enabled <code>LOG_PREFIX</code> <code>storage</code> Log prefix <code>AZURE_STORAGE_ENABLE_HTTPS</code> <code>true</code> Enable HTTPS for Azure storage <code>COSMOSDB_DATABASE</code> <code>osdu-db</code> Cosmos DB database name <code>SERVER_PORT</code> <code>8080</code> Server port <code>SERVICEBUS_TOPIC_NAME</code> <code>recordstopic</code> Service Bus topic name <code>SERVICEBUS_V2_TOPIC_NAME</code> <code>recordstopic-v2</code> Service Bus topic name (version 2) <code>REDIS_DATABASE</code> <code>4</code> Redis database number <code>ENTITLEMENTS_SERVICE_API_KEY</code> <code>OBSOLETE</code> Entitlements service API key <code>LEGAL_SERVICE_REGION</code> <code>southcentralus</code> Legal service region <code>LEGAL_SERVICEBUS_TOPIC_NAME</code> <code>legaltagschangedtopiceg</code> Legal service bus topic name <code>LEGAL_SERVICEBUS_TOPIC_SUBSCRIPTION</code> <code>eg_sb_legaltagchangedsubscription</code> Legal service bus topic subscription <code>OPA_ENABLED</code> <code>false</code> Enable OPA"},{"location":"services_core_workflow/","title":"Workflow","text":"<p>The workflow service can be run locally in editors with the following configuration.</p> <pre><code>Build and Run Configuration: SpringBoot\n---------------------------------------\nJava SDK:  java zulu-17\nModule: file-azure\nClass: org.opengroup.osdu.workflow.provider.azure.WorkflowAzureApplication\nVM Options: -javaagent:/&lt;your_full_path&gt;/osdu-developer/src/applicationinsights-agent.jar\n</code></pre> Variable Value Description <code>APPINSIGHTS_KEY</code> <code>&lt;your_appinsights_key&gt;</code> Application Insights key <code>APPLICATIONINSIGHTS_CONNECTION_STRING</code> <code>&lt;your_appinsights_connection&gt;</code> Application Insights Connection <code>KEYVAULT_URI</code> <code>&lt;your_keyvault_uri&gt;</code> Key Vault URI <code>AZURE_HOST</code> <code>&lt;your_host_ip&gt;</code> Azure host IP <code>PARTITION_SERVICE_ENDPOINT</code> <code>http://${AZURE_HOST}/api/partition/v1/</code> Partition service endpoint <code>OSDU_ENTITLEMENTS_URL</code> <code>http://${AZURE_HOST}/api/entitlements/v2</code> Entitlements service endpoint <code>OSDU_AIRFLOW_URL</code> <code>https://${AZURE_HOST}/airflow</code> Airflow URL <code>AAD_CLIENT_ID</code> <code>&lt;your_aad_client_id&gt;</code> Active Directory client ID <code>SPRING_APPLICATION_NAME</code> <code>workflow</code> Spring application name <code>LOG_PREFIX</code> <code>workflow</code> Log prefix <code>COSMOSDB_DATABASE</code> <code>osdu-db</code> Cosmos DB database name <code>COSMOSDB_SYSTEM_DATABASE</code> <code>osdu-system-db</code> Cosmos DB system database name <code>AIRFLOW_STORAGE_ACCOUNT_NAME</code> <code>&lt;your_storage_account_name&gt;</code> Airflow storage account name <code>AZURE_PAAS_PODIDENTITY</code> <code>false</code> Azure PaaS pod identity <code>AZURE_ISTIOAUTH_ENABLED</code> <code>true</code> Turn Istio auth on <code>AZURE_PAAS_PODIDENTITY_ISENABLED</code> <code>false</code> Azure PaaS pod identity enabled <code>OSDU_AIRFLOW_USERNAME</code> <code>&lt;your_airflow_username&gt;</code> Airflow username <code>OSDU_AIRFLOW_PASSWORD</code> <code>&lt;your_airflow_password</code> Airflow password <code>OSDU_AIRFLOW_VERSION2_ENABLED</code> <code>true</code> Enable Airflow version 2 <code>DP_AIRFLOW_FOR_SYSTEM_DAG</code> <code>false</code> Use Airflow for system DAGs <code>IGNORE_DAGCONTENT</code> <code>true</code> Ignore DAG content <code>IGNORE_CUSTOMOPERATORCONTENT</code> <code>true</code> Ignore custom operator content <code>SERVER_PORT</code> <code>8080</code> Server port"},{"location":"services_overview/","title":"Overview","text":"<p>Personal OSDU\u2122 instances offer flexibility in service deployments. Latest master is deployed by default although users have the option to select milestone releases.</p> <ul> <li> Master Branch - Current code</li> <li> Release Branches - Milestone code</li> </ul> <p>Deploy Milestones</p> <p>Use Feature Flag <code>SOFTWARE_VERSION</code> to deploy release branches.</p> <p>For available releases, see OSDU Milestones.</p>"},{"location":"services_overview/#core-services","title":"Core Services","text":"Name Description Partition Service Manages data partitions to ensure efficient data management and scalability. Entitlement Service Provides access control and permissions management for data within the OSDU platform. Legal Service Ensures that data compliance and legal requirements are met, including data privacy and governance. Indexer Service Indexes and categorizes data to enable efficient search and retrieval. Indexer Queue Manages the queue for processing indexing tasks, ensuring data is indexed in a timely manner. Schema Service Manages and provides access to data schemas that define the structure and format of data. Storage Service Provides scalable storage solutions for managing and retrieving large volumes of data. Search Service Facilitates searching and querying across data stored within the OSDU platform. File Service Handles file operations such as storage, retrieval, and management of data files. Workflow Service Initiates business processes within the system. During the prototype phase, it facilitates CRUD operations on workflow metadata and triggers workflows in Apache Airflow. Additionally, the service manages process startup records, acting as a wrapper around Airflow functions.."},{"location":"services_overview/#reference-services","title":"Reference Services","text":"Name Description Unit Service Provides dimension/measurement and unit definitions. CRS Catalog Service Provides API endpoints to work with geodetic reference data, allowing developers to retrieve CRS definitions, select appropriate CRSs for data ingestion, and search for CRSs based on various constraints. CRS Conversion Service Enables the conversion of coordinates from one coordinate reference system (CRS) to another."},{"location":"services_overview/#airflow-dags","title":"Airflow DAGS","text":"Name Description Manifest Ingestion DAG Used for ingesting single or multiple metadata artifacts about datasets into OSDU. CSV Parser DAG: Helps in parsing CSV files into a format for ingestion and processing."},{"location":"services_overview/#experimental-software","title":"Experimental Software","text":"<p>OSDU offers various experimental capabilities that are either very new or community contributions. These services are not yet fully mature but are available for early adopters to test and provide feedback. This solution supports the concept of experimental software through opt-in feature flags, allowing users to selectively enable and test these new features.</p> <p>Note</p> <p>Experimental software is often less stable and contains less documentation.</p> Name Description Admin UI A community supported Angular Administration UI for OSDU."},{"location":"services_reference_conversion/","title":"CRS Conversion","text":"<p>Coming Soon</p>"},{"location":"services_reference_crs/","title":"CRS Catalog","text":"<p>Coming Soon</p>"},{"location":"services_reference_unit/","title":"Unit","text":"<p>Coming Soon</p>"},{"location":"services_source/","title":"OSDU Source Code","text":"<p>This section provides comprehensive guidance for working with the community code and integrates automatically with an OSDU\u2122 Personal Instance. The preconfigured <code>src</code> directory structure optimizes the organization of repositories to enable efficiency. A personal instance includes generated environment variables to streamline the development process.</p> <p>Tip</p> <p>Environment variables can be referenced in IntelliJ with the EnvFile plugin.</p> <p>Warning</p> <p>Avoid using containers, always use a local machine when working with OSDU\u2122 source code.</p>"},{"location":"services_source/#overview","title":"Overview","text":"<p>The directory is organized into the following structure:</p> <ul> <li> <p> lib</p> <p>Libraries and shared components.</p> </li> <li> <p> core</p> <p>Core OSDU service repositories.</p> </li> <li> <p> reference</p> <p>Reference and Helper OSDU service repositories.</p> </li> </ul>"},{"location":"services_source/#cloning","title":"Cloning","text":"<p>To clone the OSDU services into this directory structure, you can use the <code>gita</code> command. <code>gita</code> is a tool that simplifies the management of multiple Git repositories. If you haven't already installed <code>gita</code>, you can do so by following these instructions:</p>"},{"location":"services_source/#installing-gita","title":"Installing <code>gita</code>","text":"<p>Use pip to install gita: <code>pip install gita</code></p> Learning Opportunity <p>To learn more about this tool and its capabilities, check out the comprehensive gita documentation on the official GitHub repository.</p>"},{"location":"services_source/#clone-repositories","title":"Clone Repositories","text":"<p>Navigate to the appropriate subdirectory (e.g., <code>lib</code>, <code>core</code>, or <code>reference</code>) and use the <code>gita</code> command to clone down the required OSDU services and auto create a group.</p> BashPowershell <pre><code># Clone OSDU Repositories\n(cd lib &amp;&amp; gita clone -f repos)\n(cd core &amp;&amp; gita clone -f repos)\n(cd reference &amp;&amp; gita clone -f repos)\n\n# Create the Groups\ngita add -a lib &amp;&amp; gita group rename lib osdu-lib\ngita add -a core &amp;&amp; gita group rename core osdu-core\ngita add -a reference &amp;&amp; gita group rename reference osdu-reference\n\n# Set the Auto Context\ngita context auto\n\n# Switch to the release branch and pull code\ngita super switch release/0.27\ngita pull\n</code></pre> <pre><code># Clone OSDU Repositories\nPush-Location lib; gita clone -f repos; Pop-Location\nPush-Location core; gita clone -f repos; Pop-Location\nPush-Location reference; gita clone -f repos; Pop-Location\n\n# Create the Groups\ngita add -a lib; gita group rename lib osdu-lib\ngita add -a core; gita group rename core osdu-core\ngita add -a reference; gita group rename reference osdu-reference\n\n# Set the Auto Context\ngita context auto\n\n# Switch to the release branch and pull code\ngita super switch release/0.27\ngita pull\n</code></pre>"},{"location":"tutorial_arm/","title":"Portal Template (ARM)","text":"<p>The solution is a native bicep solution and includes a transpiled ARM template from the latest release.  This ARM template can then be easily used as a custom template deployment.</p>"},{"location":"tutorial_arm/#1-microsoft-entra-app-create","title":"1. Microsoft Entra App Create","text":"<p>The solution requires the use of an Application to be registered in Microsoft Entra.</p> <p></p>"},{"location":"tutorial_arm/#2-microsoft-entra-app-info","title":"2. Microsoft Entra App Info","text":"<p>Create a new client secret to use and note the following IDs for the application.</p> <ul> <li>Application Client Id</li> <li>Application Client Principal Oid</li> </ul> <p> </p>"},{"location":"tutorial_arm/#2-deploy-solution","title":"2. Deploy Solution","text":"<p>Click the <code>Deploy to Azure</code> button and fill out the required Parameters.</p> <ul> <li>Select the desired Subscription</li> <li>Select or create a new Resource Group</li> <li>Choose an Azure region to deploy into.</li> </ul> <p>The following fields are mandatory fields to complete.</p> Field Description Email Address A valid email address for the first user in the Tenant. Application Client Id A valid GUID of the Entra Application Client Id Application Secret A valid Entra Application Secret Application Client Principal Oid A valid GUID for the Prinicpal Object Id <p>Additional fields are all optional changes.  Please see feature flags for further details.</p> <p>Deployment will exceed 1 hour.</p> <p></p>"},{"location":"tutorial_arm/#3-validate-completion","title":"3. Validate Completion","text":"<p>Deployment is broken up into 2 parts, Infrastructure and Software.</p> <p>Infrastructure deployment can be validated by investigating the deployments on the resource group. Success can be seen by having the main deployment details green.</p> <p>Software deployment occurs after successful infrastructure and be seen by looking at the Azure Kubernetes Service gitops blade and observing software compliance.</p> <p> </p>"},{"location":"tutorial_arm/#3-microsoft-entra-app-auth","title":"3. Microsoft Entra App Auth","text":"<p>Lookup the ingress IP address that has been configured under the kubernetes service <code>services and ingresses</code> blade and add the redirect uri to a spa platform on the application authentication blade.</p> <p> </p>"},{"location":"tutorial_arm/#3-retrieve-token","title":"3. Retrieve Token","text":"<p>Using the form located at <code>https://&lt;ip_address&gt;/auth/spa/</code> retrieve a valid access token by clicking the Authorize button which will return an authorization code, then clicking the Get Tokens button which will retrieve a limited use access token.</p> <p> </p>"},{"location":"tutorial_arm/#4-execute-api-requests","title":"4. Execute API Requests","text":"<p>OSDU Services have swagger pages that are available.  Using the retrieved bearer token authenticate and execute API calls as desired.</p> <p> </p>"},{"location":"tutorial_cli/","title":"Command Line (AZD)","text":"<p>The process for working with the solution using the Azure Developer CLI is the recommended way for deployent offering the most flexibility.  This process can be used if working directly with the solution on a computer, working in a Visual Studio Code remote container, or using a cloud environment like Github Codespaces.</p> <p>For ease of use this tutorial will leverage a cloud environment shell using Azure Cloud Shell.</p> <p>It is recommended to use persistent files in Azure Cloud Shell for non-ephemeral sessions.</p> <ul> <li>How to Use Azure Cloud Shell</li> <li>Persist Files in  Azure Cloud Shell</li> </ul> <p>In this tutorial you'll clone the osdu-developer repo to your clouddrive with Azure Cloud Shell, run a series of scripts to log into your subscription and deploy the solution, then verify the solution by running a few tests.</p>"},{"location":"tutorial_cli/#prepare-a-cloud-shell-session-before-you-deploy-the-solution","title":"Prepare a Cloud Shell Session before you Deploy the Solution","text":"<p>In this section you will create a Cloud Shell session, then modify your PowerShell profile in the session with inherent code required to run the deployment scripts.</p>"},{"location":"tutorial_cli/#1-open-a-cloud-shell-session-in-azure-portal","title":"1. Open a Cloud Shell session in Azure Portal","text":"<p>From http://portal.azure.com open an Azure Cloud Shell session in PowerShell, see How to Use Azure Cloud Shell.  Run the following command:</p> <pre><code>New-Item -Path $Profile -ItemType File -Force\n</code></pre>"},{"location":"tutorial_cli/#2-modify-your-powershell-profile","title":"2. Modify your PowerShell profile","text":"<p>Open the PowerShell code editor in your Azure portal by running the following command.</p> <pre><code>code $Profile\n</code></pre>"},{"location":"tutorial_cli/#3-create-a-powershell-profile-for-use-with-helper-functions","title":"3. Create a PowerShell profile for use with helper functions","text":"<p>Paste the following code into your '$Profile' ('Microsoft.PowerShell_profile.ps1') file. Save, then restart the session.</p> <pre><code>function Show-Env\n{\n  Get-ChildItem Env:\n}\n\nfunction Invoke-Envrc {\n    if (Test-Path .\\.envrc) {\n        $envVars = @{}\n\n        function Resolve-EnvValue($value) {\n            while ($value -match '\\$\\{(\\w+)\\}') {\n                $varName = $matches[1]\n                $varValue = if ($envVars.ContainsKey($varName)) { $envVars[$varName] } else { [System.Environment]::GetEnvironmentVariable($varName) }\n                if ($varValue -eq $null) { break }\n                $value = $value -replace [regex]::Escape('${' + $varName + '}'), $varValue\n            }\n            return $value\n        }\n\n        Get-Content .\\.envrc | ForEach-Object {\n            if ($_ -match '^\\s*export\\s+(\\w+)=(\".*?\"|''.*?''|.*?)\\s*$') {\n                $name = $matches[1]\n                $value = $matches[2].Trim('\"', \"'\")\n\n                # Store the raw value first\n                $envVars[$name] = $value\n            }\n        }\n\n        # Resolve all values after parsing\n        $resolvedVars = @{}\n        foreach ($kvp in $envVars.GetEnumerator()) {\n            $resolvedValue = Resolve-EnvValue $kvp.Value\n            $resolvedVars[$kvp.Key] = $resolvedValue\n            [System.Environment]::SetEnvironmentVariable($kvp.Key, $resolvedValue, [System.EnvironmentVariableTarget]::Process)\n        }\n\n        Write-Host \"Environment variables loaded from .envrc\"\n    } else {\n        Write-Host \".envrc file not found in the current directory.\"\n    }\n}\n\nNew-Alias direnv Invoke-Envrc\nNew-Alias env Show-Env\n</code></pre> <p></p>"},{"location":"tutorial_cli/#clone-and-deploy-the-solution","title":"Clone and Deploy the Solution","text":"<p>In this section you'll clone the osdu-developer repo into your clouddrive, then run a series of scripts to log into your subscription and deploy the solution.</p>"},{"location":"tutorial_cli/#1-clone-the-solution","title":"1. Clone the Solution","text":"<p>Use a new Cloud Shell session and clone the repository.</p> <pre><code>cd clouddrive\ngit clone https://github.com/Azure/osdu-developer.git\n</code></pre> <p></p>"},{"location":"tutorial_cli/#2-deploy-the-solution","title":"2. Deploy the Solution","text":"<p>Deploy the solution to your subscription answering any questions that may be presented.</p> <p>Deployment will exceed 1 hour.  It is common for a cloud session to timeout due to lack of activity. If a session times out executing <code>azd provision</code> again will continue the process.</p> <pre><code>cd clouddrive/osdu-developer\naz account set -s &lt;your_subscription&gt;\nazd config set alpha.resourceGroupDeployments on\nazd init -e &lt;your_env_name&gt;\nazd provision\n</code></pre> <p></p> <p></p> <p>A successful deployment will result in a web page opening for the Identity Provider. Retrieve a one time use Authorization Code and set it for the environment.</p>"},{"location":"tutorial_cli/#verify-your-deployment","title":"Verify your Deployment","text":""},{"location":"tutorial_cli/#1-generate-settings","title":"1. Generate settings","text":"<pre><code>azd env set AUTH_CODE=&lt;your_auth_code&gt;\nazd hooks run settings\n</code></pre>"},{"location":"tutorial_cli/#2-clone-services-and-test","title":"2. Clone services and test","text":"<p>Clone the OSDU Services</p> <pre><code># Install the git repo manager tool\npip install gita\n\n# Clone the repositories\ngita clone -f src/core/repos\n</code></pre> <p>Load the environment variables necessary for successful test execution of your environment.</p> <pre><code>cd src\ndirenv  # Execute the powershell function to initialize the environment values\n</code></pre> <p>Change to service directories and execute integration tests.</p> <p>The following is the pattern of how to test services.</p> <pre><code># Test Partition Service\ncd src/core/partition/testing/partition-test-azure\nmvn test\n\n# Test Entitlement Service\ncd src/core/entitilements/testing/entitlements-v2-test-azure\nmvn test\n</code></pre>"},{"location":"tutorial_cli/#clean-up","title":"Clean up","text":"<p>After a deployment remove environment and delete the Azure Application that was created in Microsoft Entra. You can clean up your environments using scripts or manually through the Azure Portal.</p>"},{"location":"tutorial_cli/#option-1-scripting-method","title":"Option 1. Scripting Method","text":"<p>From the Azure Portal, run the following in your Azure Cloud Shell session.</p> <pre><code># Remove the resources\nazd down --force --purge\n\n# Remove the environment\nrm .azure/&lt;your_env_name&gt;\n</code></pre>"},{"location":"tutorial_cli/#option-2-manual-method","title":"Option 2. Manual method","text":"<p>Manually delete the resources from the Azure Portal.</p> <ol> <li>Remove the Azure Resource Group</li> <li>Purge any Key Vaults or App Configuration Services</li> <li>Delete the Azure Application from Microsoft Entra</li> <li>Remove the cloned repository.</li> </ol>"}]}