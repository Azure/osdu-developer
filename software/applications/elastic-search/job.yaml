# apiVersion: v1
# kind: Pod
# metadata:
#   name: debug-pod
#   namespace: elastic-search
# spec:
#   containers:
#   - name: debug-container
#     image: busybox
#     volumeMounts:
#       - name: es-basic-auth
#         mountPath: /mnt/elasticsearch-es-elastic-user
#     command: ["/bin/sh"]
#     args: ["-c", "sleep 3600"]
#   volumes:
#   - name: es-basic-auth
#     secret:
#       secretName: elasticsearch-es-elastic-user


# ---
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: cred-init
#   namespace: elastic-search
# spec:
#   activeDeadlineSeconds: 1200
#   backoffLimit: 50
#   ttlSecondsAfterFinished: 3600
#   template:
#     metadata:
#       name: cred-create
#     spec:
#       serviceAccountName: workload-identity-sa  # Specify the service account here
#       initContainers:
#       - name: health-check
#         image: docker.elastic.co/elasticsearch/elasticsearch:8.5.3
#         volumeMounts:
#           - name: es-basic-auth
#             mountPath: /mnt/elasticsearch-es-elastic-user
#             subPath: elastic
#         args:
#         - /bin/sh
#         - -c
#         - |
#           check_cluster_health() {
#               echo ""
#               echo "--------- Trying to fetch cluster health ----------"
#               PASSWORD=$(cat /mnt/elasticsearch-es-elastic-user)
#               echo "Password read from secret: $PASSWORD"  # Debugging step
#               response=$(curl -v -u "elastic:$PASSWORD" -w " \\nHTTP ResponseCode: %{response_code}" "http://elasticsearch-es-http.elastic-search:9200/_cluster/health"  2>&1)
#               response=$(echo "$response" | sed "s/Authorization: Basic \S*/Authorization: <masked>/; s/Server auth using Basic with user \S*/Server auth using Basic with user <masked>/; s/{/'{/; s/}/}'/")
#               echo ""
#               echo "Cluster health response: $response"
#               status=$(echo "$response" | grep -oP '(?<="status":")[^"]+')
#               echo "Cluster status: $status"
#           }

#           retry_count=0
#           max_retries=150
#           retry_interval=5

#           while [[ $retry_count -lt $max_retries ]];
#           do
#             check_cluster_health
#             if [[ "${status,,}" == "green" ]]; then
#                 echo "Cluster health is green."
#                 break
#             fi
#             echo "Cluster health is not green. Attempt $((retry_count+1))/$max_retries"
#             sleep $retry_interval
#             ((retry_count++))
#           done

#           if [[ $retry_count -ge $max_retries ]]; then
#             echo "Max Retries done! ElasticSearch did not reach green state in expected time. Exiting with code -1"
#             exit -1
#           fi
#           echo "Completed ElasticSearch Health Check Successfully. Exiting.."

#       containers:
#       - name: role-and-user-creator
#         image: docker.elastic.co/elasticsearch/elasticsearch:8.5.3
#         volumeMounts:
#           - name: azure-keyvault
#             mountPath: /mnt/azure-keyvault
#           - name: es-basic-auth
#             mountPath: /mnt/elasticsearch-es-elastic-user
#             subPath: elastic
#         securityContext:
#           allowPrivilegeEscalation: false
#           runAsUser: 0
#         command: 
#               - sh
#               - "-c"
#               - |
#                 /bin/bash <<'EOF'
#                 sleep 10
#                 set -e
#                 DP_NAME="opendes"
#                 CUSTOM_ELASTIC_ROLE="service-role"
#                 ROLE_JSON="{\"metadata\":{\"type\":\"role\",\"name\":\"${CUSTOM_ELASTIC_ROLE}\"},\"cluster\":[\"all\"],\"indices\":[{\"names\":[\"*\"],\"privileges\":[\"read\",\"write\",\"create\",\"delete\",\"index\",\"monitor\",\"create_index\",\"delete_index\",\"view_index_metadata\",\"manage\"]}]}"
#                 PRIMARY_USER_JSON="{\"password\":\"$(</mnt/azure-keyvault/opendes-es-primary-user-password)\" ,\"roles\":[\"${CUSTOM_ELASTIC_ROLE}\"]}"
#                 SECONDARY_USER_JSON="{\"password\": \"$(</mnt/azure-keyvault/opendes-es-secondary-user-password)\",\"roles\":[\"${CUSTOM_ELASTIC_ROLE}\"]}"

#                 response=($(curl -s -w "\n%{http_code}" -o response.txt -u "elastic:$(cat /mnt/elasticsearch-es-elastic-user)" -XPOST "http://elasticsearch-es-http.elastic-search:9200/_security/role/${CUSTOM_ELASTIC_ROLE}" -k -H "Content-Type: application/json" -d"${ROLE_JSON}"))
#                 echo "Create Custom Role - ResponseCode: $response, ResponseBody: $(cat response.txt)"
#                 if [ "$response" -ne 200 ]; then echo "The request failed with status code: $response"; exit 1; fi

#                 response=($(curl -s -w "\n%{http_code}" -o response.txt -u "elastic:$(cat /mnt/elasticsearch-es-elastic-user)" -XPOST "http://elasticsearch-es-http.elastic-search:9200/_security/user/${primaryUserName}" -k -H "Content-Type: application/json" -d"${PRIMARY_USER_JSON}"))
#                 echo "Create Primary User - ResponseCode: $response, ResponseBody: $(cat response.txt)"
#                 if [ "$response" -ne 200 ]; then echo "The request failed with status code: $response"; exit 1; fi

#                 response=($(curl -s -w "\n%{http_code}" -o response.txt -u "elastic:$(cat /mnt/elasticsearch-es-elastic-user)" -XPOST "http://elasticsearch-es-http.elastic-search:9200/_security/user/${secondaryUserName}" -k -H "Content-Type: application/json" -d"${SECONDARY_USER_JSON}"))
#                 echo "Create Secondary User - ResponseCode: $response, ResponseBody: $(cat response.txt)"
#                 if [ "$response" -ne 200 ]; then echo "The request failed with status code: $response"; exit 1; fi

#                 echo -e "######### Role and User setup complete!! ###########\n"
#                 EOF
#       restartPolicy: OnFailure
#       volumes:
#         - name: es-basic-auth
#           secret:
#             secretName: "elasticsearch-es-elastic-user"
#         - name: azure-keyvault
#           csi:
#             driver: secrets-store.csi.k8s.io
#             readOnly: true
#             volumeAttributes:
#               secretProviderClass: azure-keyvault
