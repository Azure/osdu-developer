{{- if (default false .Values.blobUpload.enabled) -}}
{{- $storageAccounts := list }}

{{/* Try to get storage accounts from ConfigMap if it exists */}}
{{- if (lookup "v1" "ConfigMap" .Release.Namespace "configmap-services") }}
  {{- $configMap := (lookup "v1" "ConfigMap" .Release.Namespace "configmap-services").data }}
  {{- range $key, $value := $configMap }}
    {{- if hasPrefix "partition_storage_name_" $key }}
      {{- $storageAccounts = append $storageAccounts $value }}
    {{- end }}
  {{- end }}
{{/* Otherwise use storage accounts from values if provided */}}
{{- else if .Values.blobUpload.storageAccounts }}
  {{- $storageAccounts = .Values.blobUpload.storageAccounts }}
{{- end }}

{{- if $storageAccounts }}
{{- range $storageAccount := $storageAccounts }}
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: {{ $.Release.Name }}-blob-storage-{{ $storageAccount }}
provisioner: blob.csi.azure.com
parameters:
  storageAccount: {{ $storageAccount }}
  containerName: {{ $.Values.blobUpload.container }}
  clientID: {{ $.Values.blobUpload.clientId | default $.Values.azure.clientId }}
mountOptions:
  - -o allow_other
  - --file-cache-timeout-in-seconds=120
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ $.Release.Name }}-blob-pvc-{{ $storageAccount }}
  namespace: {{ $.Release.Namespace }}
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: {{ $.Release.Name }}-blob-storage-{{ $storageAccount }}
---
{{- range $.Values.blobUpload.items }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $.Release.Name }}-blob-upload-{{ .name }}-{{ $storageAccount }}
  namespace: {{ $.Release.Namespace }}
spec:
  ttlSecondsAfterFinished: 300
  template:
    spec:
      serviceAccountName: workload-identity-sa
      volumes:
      - name: blob-storage
        persistentVolumeClaim:
          claimName: {{ $.Release.Name }}-blob-pvc-{{ $storageAccount }}
      containers:
      - name: blob-upload
        image: mcr.microsoft.com/cbl-mariner/base/core:2.0
        command: ["/bin/sh"]
        args:
        - -c
        - |
          # Install curl
          tdnf install -y curl
          
          # Download the file
          echo "Downloading file from {{ .url }}"
          curl -kso {{ .file }} "{{ .url }}"
          
          # Copy to mounted blob container
          cp {{ .file }} /mnt/blob/{{ $.Values.blobUpload.container }}/{{ .file }}
          
          echo "File uploaded to container {{ $.Values.blobUpload.container }} in storage account {{ $storageAccount }}"
        volumeMounts:
        - name: blob-storage
          mountPath: /mnt/blob
      restartPolicy: Never
{{- end }}
{{- end }}
{{- end }}
{{- end }}