{{- if (include "osdu-admin-ui.isEnabled" .) }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: admin-ui-app-module-ts
  namespace: {{ .Release.Namespace }}
data:
  app.module.ts: |
    import { environment, scopeProctedURLs } from 'src/environments/environment';
    import { BrowserModule } from '@angular/platform-browser';
    import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
    import { ErrorHandler, NgModule } from '@angular/core';
    import { APP_BASE_HREF } from '@angular/common';

    import { AppRoutingModule } from './app-routing.module';
    import { AppComponent } from './app.component';
    import { HeaderComponent } from './header/header.component';
    import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
    import { NgbModule } from '@ng-bootstrap/ng-bootstrap';
    import { NgxSpinnerModule } from 'ngx-spinner';
    import { SidenavComponent } from './sidenav/sidenav.component';
    import { NgMultiSelectDropDownModule } from 'ng-multiselect-dropdown';
    import { NgSelectModule } from '@ng-select/ng-select';
    import { FormsModule, ReactiveFormsModule } from '@angular/forms';
    import { MatSnackBarModule } from '@angular/material/snack-bar';
    import { MatCheckboxModule } from '@angular/material/checkbox';
    import {
      MsalModule,
      MsalService,
      MsalGuard,
      MsalInterceptor,
      MsalBroadcastService,
      MsalRedirectComponent,
    } from '@azure/msal-angular';
    import {
      PublicClientApplication,
      InteractionType,
      BrowserCacheLocation,
    } from '@azure/msal-browser';
    import { UserMenuComponent } from './user-menu/user-menu.component';
    import { SweetAlert2Module } from '@sweetalert2/ngx-sweetalert2';
    import { ServiceWorkerModule } from '@angular/service-worker';
    import { UpdateSnackBarComponent } from './update-snack-bar/update-snack-bar.component';
    import { MatToolbarModule } from '@angular/material/toolbar';
    import { MatIconModule } from '@angular/material/icon';
    import { MatButtonModule } from '@angular/material/button';
    import { MatMenuModule } from '@angular/material/menu';
    import { MatSidenavModule } from '@angular/material/sidenav';
    import { DrawerItemComponent } from './drawer-item/drawer-item.component';
    import { MatTooltipModule } from '@angular/material/tooltip';
    import { DrawerComponent } from './drawer/drawer.component';
    import { MatExpansionModule } from '@angular/material/expansion';
    import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
    import { AclModule } from './acl/acl.module';
    import { MonitoringService } from './common/monitoring.service';
    import { ErrorHandlerService } from './common/error-handler.service';
    import { NgxEchartsModule } from 'ngx-echarts';

    @NgModule({
      declarations: [
        AppComponent,
        HeaderComponent,
        SidenavComponent,
        UserMenuComponent,
        UpdateSnackBarComponent,
        DrawerItemComponent,
        DrawerComponent,
      ],
      imports: [
        BrowserModule,
        BrowserAnimationsModule,
        AppRoutingModule,
        HttpClientModule,
        NgbModule,
        NgxSpinnerModule,
        NgMultiSelectDropDownModule,
        NgSelectModule,
        FormsModule,
        MatToolbarModule,
        MatIconModule,
        MatButtonModule,
        MatSnackBarModule,
        MatProgressSpinnerModule,
        MatSidenavModule,
        MatExpansionModule,
        MatMenuModule,
        MatTooltipModule,
        AclModule,
        ReactiveFormsModule,
        MatCheckboxModule,
        NgxEchartsModule.forRoot({
          echarts: () => import('echarts'),
        }),
        MsalModule.forRoot(
          new PublicClientApplication({
            auth: {
              clientId: environment.settings.idp.client_id,
              authority: `${environment.settings.idp.auth_url}${environment.settings.idp.tenant_id}`,
              redirectUri: getRedirectUri(environment.settings.idp.redirect_uri),
              postLogoutRedirectUri: window.location.origin,
            },
            cache: {
              cacheLocation: BrowserCacheLocation.LocalStorage,
            },
          }),
          {
            interactionType: InteractionType.Redirect, // MSAL Guard Configuration
          },
          {
            interactionType: InteractionType.Redirect, // MSAL Interceptor Configuration,
            protectedResourceMap: new Map(scopeProctedURLs()),
          }
        ),
        SweetAlert2Module.forRoot(),
        ServiceWorkerModule.register('ngsw-worker.js', {
          enabled: true,
          // Register the ServiceWorker as soon as the application is stable
          // or after 30 seconds (whichever comes first).
          registrationStrategy: 'registerImmediately',
        }),
      ],
      providers: [
        {
          provide: HTTP_INTERCEPTORS,
          useClass: MsalInterceptor,
          multi: true,
        },

        { provide: MonitoringService, useClass: MonitoringService },
        { provide: ErrorHandler, useClass: ErrorHandlerService },
        MsalService,
        MsalGuard,
        MsalBroadcastService,
        { provide: APP_BASE_HREF, useValue: '/adminui' },
      ],

      bootstrap: [AppComponent, MsalRedirectComponent],
    })
    export class AppModule {}

    function getRedirectUri(configuredUri: string): string {
      if (isValidUrl(configuredUri)) {
        return configuredUri;
      } else if (configuredUri === 'redirect_uri') {
        return `${window.location.origin}/auth/callback`;
      } else {
        return `${window.location.origin}/auth/callback`;
      }
    }

    function isValidUrl(url: string): boolean {
      try {
        new URL(url);
        return true;
      } catch (e) {
        return false;
      }
    }
{{- end }}
