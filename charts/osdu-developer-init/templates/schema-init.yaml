{{- $namespace := .Release.Namespace -}}
{{- if .Values.jobs.schemaInit }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: schema-init
  namespace: {{ $namespace }}
spec:
  ttlSecondsAfterFinished: 120
  template:
    spec:
      volumes:
      - name: script
        configMap:
          name: schema-init-script
          defaultMode: 0500
      initContainers:
      - name: data-seed
        image: community.opengroup.org:5555/osdu/platform/system/schema-service/schema-service-schema-load-release-0-24:2b6d853458ea51e48541eb1ff050bdad927cf757
        volumeMounts:
          - name: script
            mountPath: "/home/osdu/deployments/scripts/azure/bootstrap.sh"
            subPath: init.sh
        env:
          - name: DATA_PARTITION
            value: {{ .Values.partition | quote }}
          - name: AZURE_AD_APP_RESOURCE_ID
            value: {{ .Values.clientId | quote }}
          - name: AZURE_TENANT_ID
            value: {{ .Values.tenantId | quote }}
          - name: AZURE_CLIENT_ID
            value: {{ .Values.clientId | quote }}
          - name: AZURE_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ .Values.clientSecret.name | quote }}
                key: {{ .Values.clientSecret.key | quote }}
      containers:
      - name: sleep
        image: istio/base
        command: ["/bin/sleep", "10"]
      restartPolicy: Never
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: schema-init-script
  namespace: {{ $namespace }}
data:
  init.sh: |
    #!/usr/bin/env sh
    # Cleanup function
    cleanup() {
        echo "Terminating istio sidecar"
        curl -X POST "http://localhost:15020/quitquitquit"
        exit
    }

    trap cleanup EXIT

    if [[ -z "${NAMESPACE}" ]]; then
        NAMESPACE="osdu-core"
    fi


    export AZURE_SCHEMA_URL="https://schema.osdu-core.svc.local/api/schema-service/v1/schemas/system"
    currentStatus="success"
    currentMessage="All schemas uploaded successfully"
    BEARER_TOKEN=`python $AZURE_DEPLOYMENTS_SUBDIR/Token.py`
    export BEARER_TOKEN=$BEARER_TOKEN
    python $AZURE_DEPLOYMENTS_SCRIPTS_SUBDIR/DeploySharedSchemas.py -u $AZURE_SCHEMA_URL
    ret=$?
    echo "Return value is $ret"

    if [[ $ret -ne 0 ]]; then
        currentStatus="failure"
        currentMessage="Schema loading failed. Please check error logs for more details."
    fi
    if [ ! -z "$CONFIG_MAP_NAME" -a "$CONFIG_MAP_NAME" != " " ]; then
        az login --identity --username $OSDU_IDENTITY_ID
        ENV_AKS=$(az aks list --resource-group $RESOURCE_GROUP_NAME --query [].name -otsv)
        az aks get-credentials --resource-group $RESOURCE_GROUP_NAME --name $ENV_AKS
        kubectl config set-context $RESOURCE_GROUP_NAME --cluster $ENV_AKS

        Status=$(kubectl get configmap $CONFIG_MAP_NAME -o jsonpath='{.data.status}')
        Message=$(kubectl get configmap $CONFIG_MAP_NAME -o jsonpath='{.data.message}')

        Message="${Message}Schema load Message: ${currentMessage}. "

        ## Update ConfigMap
        kubectl create configmap $CONFIG_MAP_NAME \
            --from-literal=status="$currentStatus" \
            --from-literal=message="$Message" \
            -o yaml --dry-run=client | kubectl replace -f -
    fi

    if [[ ${currentStatus} == "success" ]]; then
        exit 0
    else
        exit 1
    fi
{{- end }}
